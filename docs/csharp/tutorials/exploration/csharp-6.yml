### YamlMime:Tutorial
title: Prozkoumat C# 6 - C# interaktivní C# výuka
metadata:
  title: Prozkoumejte C# 6 - Vyzkoušejte nové funkce v C# 6 interaktivně pomocí prohlížeče
  description: V tomto kurzu budete používat prohlížeč k interaktivnímu prozkoumání c# 6. Budete zkoumat nové idiomy, které můžete použít s C# 6, které umožňují stručnější a čitelnější kód.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 45f76b4d0df32436e5ae8e252cae80c7a63d5e36
  ms.sourcegitcommit: d9470d8b2278b33108332c05224d86049cb9484b
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 04/17/2020
  ms.locfileid: "81607451"
items:
- durationInMinutes: 1
  content: >
    Tento kurz umožňuje prozkoumat C# 6 interaktivně pomocí prohlížeče k zápisu C# a zobrazit výsledky kompilace a spuštění kódu. Obsahuje řadu lekcí, které upravují dřívější postupy jazyka C# tak, aby používaly novější, stručnější funkce jazyka C# 6. Zbývající část tohoto článku obsahuje přehled každé z těchto funkcí s odkazem na prozkoumání jednotlivých funkcí.
- title: Automatické vlastnosti jen pro čtení umožňují typy jen pro čtení
  durationInMinutes: 2
  content: "Dvě vylepšení syntaxe automatických vlastností usnadňují použití automatických vlastností na více místech: vlastnosti auto-data jen pro čtení a inicializátory automatických vlastností. Vezměme si tento malý program:\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Zadejte zaostřovací režim, zkopírujte předchozí kód do interaktivního okna Jazyka C#. Potom vyberte *Spustit,* abyste viděli, co kód dělá. `AllCaps`má nežádoucí vedlejší účinek úpravy hodnot vlastností spolu s vrácením řetězce velkých písmen. Autor `Person` třídy zamýšlel řetězce pro `FirstName` a `LastName` mají být jen pro čtení. S C# 6, můžete tento záměr jasné. Odeberte `private set` z obou vlastností a vytvořte automatickou vlastnost jen pro čtení. Vyberte *Spustit,* chcete-li zjistit, že `FirstName` `LastName` kompilátor zaznamená dvě umístění, kde jsou změněny vlastnosti a, když by neměly být. Metodu můžete `AllCaps` změnit na následující kód a opravit chybu kompilátoru:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nPomocí této nové syntaxe kompilátor zajišťuje, že vlastnosti jsou neměnné.\n"
- title: Inicializovat doprovodná pole pro automatické vlastnosti
  durationInMinutes: 1
  content: "Nová syntaxe v C# 6 umožňuje použít inicializační metody pro automatické vlastnosti. To se stává důležitější jako třídy rostou nové možnosti. Přidejte vlastnost prostředního jména a nový konstruktor, `Person` který do vaší třídy přenese tři řetězce:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nPřiřazení vlastnosti `MiddleName` je inicializátor. Inicializuje záložní pole generované kompilátorem pro druhý název.\n"
- title: Členové tvoření výrazy
  durationInMinutes: 2
  content: >
    Členy s výrazem poskytují zjednodušenou syntaxi pro zjednodušené metody. Třída `Person` má dva skvělé kandidáty. Podívejte se na `ToString`prohlášení :


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Toto `ToString` prohlášení se nahradí tímto kódem:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Zkuste to též `AllCaps` s metodou. Toto je malé zlepšení, ale při použití moudře vytvoří mnohem čitelnější kód, zejména pro objekty přenosu dat (DTO) a další typy s minimálním chováním.
- title: Import jedné třídy
  durationInMinutes: 2
  content: "Pokud opakovaně používáte statické metody jedné třídy v celém kódu, včetně názvu třídy pokaždé, když zakrývá význam kódu. Třída `Person` aktuálně importuje `System` obor názvů, <xref:System.Console?displayProperty=nameWithType> i když se používá pouze. Upravte `using` příkaz takto:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nPříkaz `static using` se stává užitečnější ve větších programech, které rozsáhle [`string`](xref:System.String) využívají jednu třídu s mnoha statickými metodami, jako je třída nebo <xref:System.Math?displayProperty=nameWithType> třída.\n"
- title: Lepší formát řetězce
  durationInMinutes: 2
  content: "C# 6 obsahuje novou syntaxi pro vytváření řetězců z řetězce a vložené výrazy, které jsou vyhodnocovány k vytvoření dalších hodnot řetězce. Můžete změnit `ToString` metody `AllCaps` a pro použití této syntaxe:\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nMísto poziční argumenty mezi `{` a `}`, napíšete c# výrazy přímo. Totéž můžete provést `Main` v metodě. Nahraďte existující kód následujícími:\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nNejste omezeni na jednu proměnnou v těchto výrazech. Začněme s novým příkladem a upravte jej tak, aby demonstroval další výrazy, které můžete použít s interpolací řetězců. Vložte následující kód do interaktivního okna v metodě: `Main`\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \nTo používá LINQ, takže budete muset přidat následující using příkaz do horní části interaktivního okna:\n\n```csharp\nusing System.Linq;\n```\n\nMístní proměnnou `average` můžete odebrat a provést tento výpočet jako součást interpolovaného řetězcového výrazu. Poslední dva řádky se nahradí následujícími řádky:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nSpuštěním předchozího příkladu byste zjistili, že výstup pro `Average` má více desetinných míst, než byste chtěli. Syntaxe interpolace řetězce podporuje všechny formátovací řetězce, které jsou k dispozici pomocí dřívějších metod formátování. Uvnitř závorek zadáte formátovací řetězec. Do `:` formátování přidejte následující výraz:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Rychlé a snadné kontroly nuly
  durationInMinutes: 2
  content: "Operátor `?.` (null podmíněné) usnadňuje zápis logiky, která bere `null` hodnoty `if` v úvahu bez problémů, bez dalšíkontroly. Chcete-li tuto funkci prozkoumat, začněte zkopírováním následujícího kódu do interaktivního okna a vyzkoušejte ji:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nTo hodí <xref:System.NullReferenceException> při spuštění vzorku. Změňte `.` operátor přístupu člena na **operátor podmíněné null**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nPo této změně neexistuje žádný výstup. To proto, že `s?.Length` výsledkem `int?` je, `s.Length` když `int`výsledek je . V tomto `s?.Length` příkladu je `null`. `?.` Vrátí, `null` pokud jeho levý `null`operand je . Operátor `?.` vrátí typ s možnou hodnotou null pro tento typ, pro typy hodnot i typy odkazů s nulovou hodnotou. Kromě toho `?.` můžete `?[]` použít pro přístup k poli nebo indexeru. Spusťte v interaktivním okně následující kód:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Více podmíněných operátorů lze kombinovat do jednoho výrazu. Levý `null` operand vytvoří `null` výsledek, takže je snadné se vyhnout vnořené if klauzule pro přístup k členům členů. Zkuste například v interaktivním okně následující kód:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n Předchozí příklad lze zjednodušit pomocí **operátoru null coalescing** k poskytnutí výchozí hodnoty:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n Operátor **podmíněné null** pomáhá psát kód, který umožňuje vaše `null` základní logiku jasné při bezproblémové testování hodnot.\n"
- title: Filtry výjimek
  durationInMinutes: 2
  content: "Filtry výjimek umožňují zachytit výjimku na základě určité podmínky. Typické použití je vytvořit metodu filtru, která protokoluje výjimky, ale nikdy zpracovává tyto výjimky. Filtr výjimek je logický výraz, `true` `catch` který je, když `false` by měla být klauzule `catch` spuštěna a výjimka by neměla být zachycena klauzulí. Zkuste následující kód v interaktivním okně: Zaznamená typ výjimky a zprávu do konzoly. Vrátí `false`, což znamená, že výjimku nelze zpracovat. Vyzkoušejte program v interaktivním okně.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nMěla by se zobrazit `LogException` zpráva z metody následovaná výchozí zprávou o výjimce. Chcete-li experimentovat, `return false` `return true` změňte příkaz na a spusťte jej znovu. Nyní je výjimka zachycena a program je spuštěn do dokončení.\n\nKromě protokolování scénáře, filtry výjimek může být nejužitečnější, když vlastnost výjimky určuje, jaké akce provést. Můžete se například podívat dovnitř a <xref:System.AggregateException> zjistit, jaké jsou obsažené výjimky, a provést některé vhodné akce v závislosti na konkrétní výjimce.\n"
- title: Použití nameof
  durationInMinutes: 2
  content: "Operátor `nameof` vrátí název libovolné proměnné, typu nebo člena typu. Vyzkoušejte následující kód v interaktivním okně, abyste zjistili, jak to funguje:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nVýstup odpovídá názvu proměnné nebo typu. I v případě, že jste zadali `System.String`plně `nameof` kvalifikovaný název typu (například) operátor vrátí neúplný název. Tato funkce je nejužitečnější, když potřebujete převést název parametru nebo vlastnosti na řetězec. Mezi příklady patří zachycení názvu argumentu <xref:System.ArgumentNullException> pro <xref:System.ArgumentException>vyvolání nebo nebo zachycení názvu změněné vlastnosti při <xref:System.ComponentModel.INotifyPropertyChanged>implementaci . \n"
- title: Syntaxe inicializace nového objektu
  durationInMinutes: 2
  content: "Syntaxe inicializace objektu nyní podporuje inicializaci *indexerů* a vlastností a polí. Tento doplněk usnadňuje inicializaci slovníků a dalších typů. Začněte se slovníkem. V interaktivním okně spusťte následující kód:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nTato syntaxe, která nastaví hodnotu v indexeru, lze použít pro libovolný typ, který má přístupový objekt přístupné sady na indexeru.\n\nDruhá změna usnadňuje povolení syntaxe inicializátoru pro typy, které představují sekvence. Kolekce inicializátory lze použít <xref:System.Collections.IEnumerable> na libovolnou třídu, která implementuje a má veřejně přístupné `Add` metody. Tato `Add` metoda může být nyní metoda rozšíření. \n\nNásledující příklad ukazuje jeden scénář pro tuto syntaxi. Vytvoří třídu, `Path` která `IEnumerable<Point3D>` implementuje a má metodu pro přidání bodů, které trvat tři argumenty. Třída `Extensions` vytvoří další `Add` metodu pro přidání nového bodu ze svých tří součástí. Tato ukázka není aktuálně spuštěna interaktivně z důvodu omezení v prostředí.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Dokončili jste zkoumání nových funkcí v C# 6. Nyní si je vyzkoušejte sami ve svých aplikacích.
