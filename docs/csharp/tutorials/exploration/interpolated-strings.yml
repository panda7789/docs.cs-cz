### YamlMime:Tutorial
title: Použití interpolace řetězců k vytvoření formátovaných řetězců
metadata:
  title: Interpolace řetězců – interaktivní kurz jazyka C#
  description: V tomto kurzu pomocí prohlížeče prozkoumat c# funkce interpolace řetězce interaktivně. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1b54ea8b3bbb63bdadb8386b0f6311f1f5458b42
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "76737544"
items:
- durationInMinutes: 2
  content: >
    Tento kurz vás naučí, jak pomocí [interpolace řetězce](../../language-reference/tokens/interpolated.md) vložit hodnoty do jednoho řetězce. Dozvíte se také, jak řídit formátování textu výsledného řetězce. Pomocí prohlížeče psát a spouštět kód Jazyka C# a můžete okamžitě zobrazit výsledky.
- title: Vytvoření interpolovaného řetězce
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko **Enter focus mode** . Potom zadejte do interaktivního okna následující `<name>` blok kódu (nahraďte svým jménem) a vyberte **Spustit**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Při spuštění kódu **výstup** zobrazí řetězec, který obsahuje vaše jméno v pozdravu. Argument řetězce volání <xref:System.Console.WriteLine%2A> metody je *interpolovaný řetězcový výraz*. Jedná se o druh šablony, který umožňuje vytvořit jeden řetězec (označovaný jako *výsledný řetězec*) z řetězce obsahujícího vložený kód. Interpolované řetězcové výrazy jsou zvláště užitečné pro vkládání hodnot do řetězce nebo zřetězení (spojování) několika řetězců.


    Výše uvedený příklad obsahuje dva prvky, které musí mít každý interpolovaný řetězcový výraz:


    - Řetězcový literál, který začíná znakem `$` před počátečním znakem uvozovek. Mezi symbolem `$` a znakem uvozovek nesmí být žádné mezery. (Pokud chcete vidět, co se stane, pokud jej zahrnete, vložte mezeru za `$` znak do interaktivního okna a spusťte aktualizovaný kód. Kompilátor jazyka C# si bude stěžovat na „neočekávaný znak $“.)


    - Jeden nebo více *interpolačních výrazů*. Interpolační výraz je označen otevírací a uzavírací složenou závorkou (`{` a `}`). Do složených závorek můžete vložit libovolný výraz v C#, který vrací hodnotu (včetně hodnoty `null`).


    Zkusme několik dalších příkladů interpolace řetězce s některými jinými datovými typy.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Zahrnutí různých datových typů
  durationInMinutes: 5
  content: >
    V předchozím kroku jste použili interpolaci řetězce k vložení jednoho řetězce do jiného. Každý interpolační výraz, který je součástí interpolovaného řetězcového výrazu, však může být libovolného datového typu. Zahrňme hodnoty různých výrazů datového typu do interpolovaného řetězce.


    V následujícím příkladu nejprve definujeme `Name` [řazenou kolekce členů](../../tuples.md) , `Price`a `perPackage` členy. V interaktivním okně spusťte následující kód:


    ```csharp

    var item = (Name: "eggplant", Price: 1.99m, perPackage: 3);

    var date = DateTime.Now;

    Console.WriteLine($"On {date}, the price of {item.Name} was {item.Price} per {item.perPackage} items.");

    ```


    Všimněte si, `item.Price` že interpolační výraz v interpolovaném řetězci překládá na text "1.99" ve výsledném řetězci. Je to proto, že když typ výsledku výrazu není řetězec, výsledek je vyřešen na řetězec následujícím způsobem:


    - Pokud se výraz interpolace vyhodnotí na , použije se `null`prázdný řetězec (""nebo) <xref:System.String.Empty?displayProperty=nameWithType>.


    - Pokud se výraz interpolace `null`nevyhodnocuje na , obvykle se nazývá `ToString` metoda výsledného výrazu.


    Ve výstupu z tohoto příkladu je datum příliš přesné (cena lilku se nemění každou sekundu) a hodnota ceny neoznačuje měnovou jednotku. V dalším kroku se dozvíte, jak tyto problémy vyřešit řízením formátu řetězcových reprezentací výsledků výrazu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Řízení formátování interpolačních výrazů
  durationInMinutes: 5
  content: >
    V předchozím kroku byly do výsledného řetězce vloženy dva špatně formátované řetězce. Jedním byla hodnota data a času, ze které potřebujeme zachovat jenom datum. Druhá byla cena, která neuváděla její měnovou jednotku. Oba problémy můžeme snadno vyřešit. Interpolace řetězců umožňuje určit *formátovací řetězce,* které řídí formátování určitých typů. Upravte volání `Console.WriteLine` z předchozího příkladu tak, aby zahrnovalo formátovací řetězce pro výrazy data a ceny, jak je znázorněno na následujícím řádku:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items");

    ```


    Formátovací řetězec určíte tak, že se budete řídit interpolačním výrazem s dvojtečkou (":") a formátovacím řetězcem. „d“ je [standardní formátovací řetězec data a času](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), který představuje krátký formát data. "C2" je [standardní číselný formátovací řetězec,](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) který představuje číslo jako hodnotu měny se dvěma číslicemi za desetinnou čárkou.


    Počet typů v knihovnách .NET podporuje předdefinovanou sadu formátovacích řetězců. Mezi ně patří i všechny číselné typy a typy data a času. Úplný seznam typů podporujících formátovací řetězce najdete v části [Formátovací řetězce a typy v knihovně tříd .NET](../../../standard/base-types/formatting-types.md#format-strings-and-net-types) v článku [Formátovací typy v rozhraní .NET](../../../standard/base-types/formatting-types.md).


    Zkuste upravit formátovací řetězce v příkladu, abyste zjistili, jak ovlivňují formátování data a času a číselné hodnoty. Ve výrazu `{date:d}` změňte „d“ na „t“ (zobrazí se krátký formát času), „y“ (zobrazí se rok a měsíc) a „yyyy“ (zobrazí se rok v podobě čtyřmístného čísla). Ve výrazu `{price:C2}` změňte „C2“ na „e“ (zobrazí se exponenciální tvar čísla) a „F3“ (zobrazí se číselná hodnota se třemi číslicemi za desetinnou čárkou).


    Kromě řízení formátování můžete také řídit šířku pole a zarovnání formátovaných řetězců, které jsou zahrnuty ve výsledném řetězci. V dalším kroku se dozvíte, jak na to.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Řízení šířky pole a zarovnání interpolačních výrazů
  durationInMinutes: 6
  content: >
    Obvykle při výsledek interpolovaného řetězcového výrazu je formátován na řetězec, tento řetězec je součástí výsledkového řetězce bez úvodnínebo koncové mezery. Zejména při práci se sadou dat pomáhá ovládat šířku pole a zarovnání textu čitelnější výstup. Chcete-li to vidět, spusťte následující kód:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Názvy položek jsou zarovnané vlevo a jejich množství jsou zarovnaná vpravo. Trasu určíte přidáním čárky (",") za interpolační výraz a určením *minimální* šířky pole. Pokud je zadanou hodnotou kladné číslo, je pole zarovnáno doprava. Pokud se jedná o záporné číslo, je pole zarovnáno doleva.


    Zkuste odebrat negativní `{"Item",-25}` znaménky z kódu a `{item.Key,-25}` spusťte příklad znovu. Tentokrát jsou názvy položek zarovnány doprava.


    Můžete kombinovat specifikátor zarovnání a formátovací řetězec pro jeden interpolační výraz. Chcete-li to provést, nejprve zadejte zarovnání následované dvojtečkou a formátovacím řetězcem. Vyzkoušejte následující kód, který zobrazuje tři formátované řetězce s definovanými šířkami polí:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste interaktivní kurz interpolace řetězců. Můžete navštívit [web .NET a](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) stáhnout syp .NET Core SDK, vytvořit projekt v počítači a zachovat kódování.


    Další informace naleznete v tématu [String interpolace](../../language-reference/tokens/interpolated.md).
