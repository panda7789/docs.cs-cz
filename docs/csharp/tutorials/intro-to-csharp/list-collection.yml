### YamlMime:Tutorial
title: Naučte se spravovat kolekce dat pomocí obecného typu seznamu.
metadata:
  title: Kolekce dat – Úvod k C# interaktivnímu kurzu
  description: V tomto kurzu použijete prohlížeč pro interaktivní informace C# . Napíšete C# kód a zobrazíte výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f7fd68120defbfcda6ac11e14bc749bf4d69c109
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969393"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se interaktivně C# naučíte používat prohlížeč k psaní C# kódu a zobrazení výsledků kompilace a spuštění kódu. Obsahuje řadu lekcí, které vytvářejí, upravují a prozkoumávat kolekce a pole.
- title: Vytváření seznamů
  durationInMinutes: 2
  content: >
    Spusťte následující kód v interaktivním okně. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu (nahraďte `<name>` názvem) a vyberte **Spustit**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Pokud ve svém prostředí používáte, měli byste místo toho postupovat podle pokynů pro [místní verzi](arrays-and-collections.md) .


    Vytvořili jste seznam řetězců, Přidali jste do tohoto seznamu tři názvy a vytiskli jste názvy všech velkých písmen. Pomocí konceptů, které jste se naučili v předchozích kurzech, Projděte seznam.


    Kód pro zobrazení názvů využívá funkci [interpolace řetězce](../../language-reference/tokens/interpolated.md) . Pokud předcházíte `string` znakem `$`, můžete vložit C# kód do deklarace řetězce. Skutečný řetězec nahradí tento C# kód hodnotou, kterou generuje. V tomto příkladu nahrazuje `{name.ToUpper()}` s každým názvem převedenými na velká písmena, protože jste volali metodu <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    Pojďme si to prozkoumat.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Upravit obsah seznamu
  durationInMinutes: 3
  content: >
    Kolekce, kterou jste vytvořili, používá typ <xref:System.Collections.Generic.List%601>. Tento typ ukládá sekvence prvků. Zadejte typ prvků mezi lomenými závorkami.


    Jedním z důležitých aspektů tohoto typu <xref:System.Collections.Generic.List%601> je, že se dá zvětšit nebo zmenšit a povolit přidávání nebo odebírání prvků. Výsledky můžete zobrazit úpravou obsahu po zobrazení jeho obsahu. Pod kód, který jste už napsali, přidejte následující kód (pod smyčkou, která obsah vytiskne):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Přidali jste dva další názvy na konec seznamu. Také jste odebrali i jednu z nich. Výstup z tohoto bloku kódu ukazuje počáteční obsah a pak vytiskne prázdný řádek a nový obsah.


    <xref:System.Collections.Generic.List%601> slouží také k odkazování na jednotlivé položky podle **indexu** . K položkám přistupujete pomocí `[` a `]`ch tokenů. Níže vložte následující kód, který jste už napsali, a zkuste to:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nemáte oprávnění k přístupu za konec seznamu. Můžete zjistit, jak dlouho seznam používá vlastnost <xref:System.Collections.Generic.List%601.Count%2A>. Přidejte následující kód, který si ho můžete vyzkoušet:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky. V C#se indexy začínají na 0, takže největší platný index je jeden menší než počet položek v seznamu.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Hledání a řazení seznamů
  durationInMinutes: 5
  content: >
    Naše ukázky používají relativně malé seznamy, ale vaše aplikace často můžou vytvářet seznamy s mnoha více prvky, někdy se číslování v tisících. Chcete-li najít prvky v těchto větších kolekcích, je nutné hledat v seznamu různé položky. Metoda <xref:System.Collections.Generic.List%601.IndexOf%2A> vyhledá položku a vrátí index položky. Zkuste zjistit, jak to funguje.  Pod to, co jste napsali, přidejte následující kód:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Nesmíte zjistit, jestli je položka v seznamu, takže byste měli vždycky kontrolovat index vrácený <xref:System.Collections.Generic.List%601.IndexOf%2A>. Pokud je-1, položka nebyla nalezena.


    Položky v seznamu lze seřadit také. Metoda <xref:System.Collections.Generic.List%601.Sort%2A> seřadí všechny položky v seznamu v normálním pořadí (abecedně v případě řetězců). Přidejte tento kód a spusťte ho znovu:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Seznamy dalších typů
  durationInMinutes: 5
  content: >
    V seznamu zatím jste používali `string` typ. Pojďme udělat <xref:System.Collections.Generic.List%601> s použitím jiného typu. Pojďme sestavit sadu čísel. Odstraňte kód, který jste dosud napsali, a nahraďte ho následujícím kódem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Vytvoří seznam celých čísel a nastaví první dvě celá čísla na hodnotu 1. *Sekvence Fibonacci sekvence*čísel začíná dvěma 1. Každé další Fibonacci číslo se zjistí tak, že se vybere součet předchozích dvou čísel. Přidejte tento kód:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Výsledky zobrazíte stisknutím klávesy **Run** .


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Výzev
  durationInMinutes: 10
  content: >
    Podívejte se, jestli můžete některé z konceptů spojit z tohoto a předchozích lekcí. Rozhlaste se podle toho, co jste zatím vytvořili s Fibonacci čísly. Zkuste a napište kód, který vygeneruje prvních 20 čísel v sekvenci. (Jako pomocný parametr se jedná o 20 Fibonacci číslo 6765.)


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Pracovali jste s podobným způsobem?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    V každé iteraci smyčky přebíráte poslední dvě celá čísla v seznamu, sečtete je a přidáte tuto hodnotu do seznamu. Smyčka se opakuje, dokud do seznamu nepřidáte 20 položek.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste kurz interaktivního seznamu. To je finální Úvod k C# interaktivnímu kurzu. Můžete navštívit [Web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na svém počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o [kolekcích .NET](../../../standard/collections/index.md) najdete v následujících článcích:

    - [Výběr typu kolekce](../../../standard/collections/selecting-a-collection-class.md)

    - [Běžně používané typy kolekcí](../../../standard/collections/commonly-used-collection-types.md)

    - [Kdy použít obecné kolekce](../../../standard/collections/when-to-use-generic-collections.md)
