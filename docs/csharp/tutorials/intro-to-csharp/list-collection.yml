### YamlMime:Tutorial
title: Naučte se spravovat kolekce dat pomocí obecného typu seznamu.
metadata:
  title: Kolekce dat – Úvod do interaktivního kurzu C#
  description: V tomto kurzu použijete v prohlížeči interaktivní informace v jazyce C#. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: ed4c30146f07c5f2ec17f13ff852d83d6469a9b0
  ms.sourcegitcommit: 046a9c22487551360e20ec39fc21eef99820a254
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/14/2020
  ms.locfileid: "83396842"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte interaktivně pracovat s C#, pomocí prohlížeče psát kód v jazyce C# a zobrazit výsledky kompilace a spuštění kódu. Obsahuje řadu lekcí, které vytvářejí, upravují a prozkoumávat kolekce a pole.
- title: Vytváření seznamů
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu (nahraďte `<name>` názvem) a vyberte **Spustit**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Pokud ve svém prostředí používáte, měli byste místo toho postupovat podle pokynů pro [místní verzi](arrays-and-collections.md) .


    Vytvořili jste seznam řetězců, Přidali jste do tohoto seznamu tři názvy a vytiskli jste názvy všech velkých písmen. Pomocí konceptů, které jste se naučili v předchozích kurzech, Projděte seznam.


    Kód pro zobrazení názvů využívá funkci [interpolace řetězce](../../language-reference/tokens/interpolated.md) . Pokud předcházíte `string` `$` znak, můžete vložit kód jazyka C# do deklarace řetězce. Skutečný řetězec nahradí kód v jazyce C# hodnotou, kterou generuje. V tomto příkladu nahrazuje `{name.ToUpper()}` název s každým názvem převedenými na velká písmena, protože jste volali <xref:System.String.ToUpper%2A?displayProperty=nameWithType> metodu.


    Pojďme si to prozkoumat.
- title: Upravit obsah seznamu
  durationInMinutes: 3
  content: >
    Kolekce, kterou jste vytvořili, používá <xref:System.Collections.Generic.List%601> typ. Tento typ ukládá sekvence prvků. Zadejte typ prvků mezi lomenými závorkami.


    Jedním z důležitých aspektů tohoto <xref:System.Collections.Generic.List%601> typu je, že může být zvětšen nebo zmenšen, což umožňuje přidat nebo odebrat prvky. Výsledky můžete zobrazit úpravou obsahu po zobrazení jeho obsahu. Pod kód, který jste už napsali, přidejte následující kód (pod smyčkou, která obsah vytiskne):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Přidali jste dva další názvy na konec seznamu. Také jste odebrali i jednu z nich. Výstup z tohoto bloku kódu ukazuje počáteční obsah a pak vytiskne prázdný řádek a nový obsah.


    <xref:System.Collections.Generic.List%601>Umožňuje také odkazovat na jednotlivé položky podle **indexu** . Přistupujete k položkám pomocí `[` `]` tokenů a. Níže vložte následující kód, který jste už napsali, a zkuste to:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nemáte oprávnění k přístupu za konec seznamu. Můžete zjistit, jak dlouho seznam používá <xref:System.Collections.Generic.List%601.Count%2A> vlastnost. Přidejte následující kód, který si ho můžete vyzkoušet:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky. V jazyce C# indexy začínají na 0, takže největší platný index je jeden menší než počet položek v seznamu.
- title: Hledání a řazení seznamů
  durationInMinutes: 5
  content: >
    Naše ukázky používají relativně malé seznamy, ale vaše aplikace často můžou vytvářet seznamy s mnoha více prvky, někdy se číslování v tisících. Chcete-li najít prvky v těchto větších kolekcích, je nutné hledat v seznamu různé položky. <xref:System.Collections.Generic.List%601.IndexOf%2A>Metoda vyhledá položku a vrátí index položky. Pokud položka není v seznamu, `IndexOf` vrátí `-1` . Zkuste zjistit, jak to funguje.  Pod to, co jste napsali, přidejte následující kód:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Nesmíte zjistit, jestli je položka v seznamu, takže byste měli vždycky kontrolovat index vrácený funkcí <xref:System.Collections.Generic.List%601.IndexOf%2A> . Pokud je-1, položka nebyla nalezena.


    Položky v seznamu lze seřadit také. <xref:System.Collections.Generic.List%601.Sort%2A>Metoda seřadí všechny položky v seznamu v normálním pořadí (abecedně pro řetězce). Přidejte tento kód a spusťte ho znovu:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Seznamy dalších typů
  durationInMinutes: 5
  content: >
    `string`V seznamu zatím jste používali typ v seznamech. Pojďme <xref:System.Collections.Generic.List%601> použít jiný typ. Pojďme sestavit sadu čísel. Odstraňte kód, který jste dosud napsali, a nahraďte ho následujícím kódem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Vytvoří seznam celých čísel a nastaví první dvě celá čísla na hodnotu 1. *Sekvence Fibonacci sekvence*čísel začíná dvěma 1. Každé další Fibonacci číslo se zjistí tak, že se vybere součet předchozích dvou čísel. Přidejte tento kód:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Výsledky zobrazíte stisknutím klávesy **Run** .
- title: Úloha
  durationInMinutes: 10
  content: >
    Podívejte se, jestli můžete některé z konceptů spojit z tohoto a předchozích lekcí. Rozhlaste se podle toho, co jste zatím vytvořili s Fibonacci čísly. Zkuste a napište kód, který vygeneruje prvních 20 čísel v sekvenci. (Jako pomocný parametr se jedná o 20 Fibonacci číslo 6765.)
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    V každé iteraci smyčky přebíráte poslední dvě celá čísla v seznamu, sečtete je a přidáte tuto hodnotu do seznamu. Smyčka se opakuje, dokud do seznamu nepřidáte 20 položek.
- content: >-
    Dokončili jste kurz interaktivního seznamu. To je poslední Úvod do interaktivního kurzu C#. Můžete navštívit [Web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na svém počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o [kolekcích .NET](../../../standard/collections/index.md) najdete v následujících článcích:

    - [Výběr typu kolekce](../../../standard/collections/selecting-a-collection-class.md)

    - [Běžně používané typy kolekcí](../../../standard/collections/commonly-used-collection-types.md)

    - [Kdy použít obecné kolekce](../../../standard/collections/when-to-use-generic-collections.md)
