### YamlMime:Tutorial
title: Naučte se spravovat kolekce dat pomocí obecného typu seznamu
metadata:
  title: Kolekce dat – interaktivní kurz Úvod do jazyka C#
  description: V tomto kurzu budete používat prohlížeč učit C# interaktivně. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f7fd68120defbfcda6ac11e14bc749bf4d69c109
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969393"
items:
- durationInMinutes: 1
  content: >
    Tento kurz vás naučí C# interaktivně pomocí prohlížeče k napsání kódu Jazyka C# a zobrazit výsledky kompilace a spuštění kódu. Obsahuje řadu lekcí, které vytvářejí, upravují a prozkoumává kolekce a pole.
- title: Vytváření seznamů
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko **Enter focus mode** . Potom zadejte do interaktivního okna následující `<name>` blok kódu (nahraďte svým jménem) a vyberte **Spustit**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Pokud používáte toto v prostředí, měli byste postupovat podle pokynů pro [místní verzi](arrays-and-collections.md) místo.


    Vytvořili jste seznam řetězců, přidali tři názvy do tohoto seznamu a vytiskli názvy ve všech písmenech ZAKONČENÍ. Používáte koncepty, které jste se naučili v předchozích kurzech pro smyčku prostřednictvím seznamu.


    Kód pro zobrazení názvů používá funkci [interpolace řetězců.](../../language-reference/tokens/interpolated.md) Když předcházíte `string` `$` znak, můžete vložit kód C# do deklarace řetězce. Skutečný řetězec nahradí tento kód Jazyka C# hodnotou, kterou generuje. V tomto příkladu nahradí `{name.ToUpper()}` s každým názvem, převedeny na velká <xref:System.String.ToUpper%2A?displayProperty=nameWithType> písmena, protože jste volali metodu.


    Pojďme pokračovat v průzkumu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Změna obsahu seznamu
  durationInMinutes: 3
  content: >
    Kolekce, kterou jste <xref:System.Collections.Generic.List%601> vytvořili, používá typ. Tento typ ukládá sekvence prvků. Určete typ prvků mezi úhlovými závorkami.


    Jedním z důležitých aspektů tohoto <xref:System.Collections.Generic.List%601> typu je, že může zvětšit nebo zmenšit, což umožňuje přidat nebo odebrat prvky. Výsledky můžete zobrazit úpravou obsahu po zobrazení jeho obsahu. Pod kód, který jste již napsali (pod smyčku, která vytiskne obsah, přidejte následující kód):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Přidali jste další dvě jména na konec seznamu. Také jste odstranili jeden stejně. Výstup z tohoto bloku kódu zobrazí počáteční obsah, pak vytiskne prázdný řádek a nový obsah.


    Umožňuje <xref:System.Collections.Generic.List%601> odkazovat na jednotlivé položky podle **indexu.** Přístup k položkám pomocí tokenů `[` a. `]` Pod to, co jste již napsali, přidejte následující kód a vyzkoušejte:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nemáte přístup přes konec seznamu. Můžete zkontrolovat, jak dlouho seznam <xref:System.Collections.Generic.List%601.Count%2A> používá vlastnost. Přidejte následující kód a vyzkoušejte:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    **Chcete-li** zobrazit výsledky, vyberte znovu spustit. V c#, indexy začínají na 0, takže největší platný index je o jeden menší než počet položek v seznamu.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Hledání a řazení v seznamech
  durationInMinutes: 5
  content: >
    Naše ukázky používají relativně malé seznamy, ale vaše aplikace mohou často vytvářet seznamy s mnoha dalšími prvky, někdy číslováním v tisících. Chcete-li najít prvky v těchto větších kolekcích, je třeba hledat v seznamu pro různé položky. Metoda <xref:System.Collections.Generic.List%601.IndexOf%2A> vyhledá položku a vrátí index položky. Zkuste to vidět, jak to funguje.  Pod to, co jste dosud napsali, přidejte následující kód:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Pravděpodobně nevíte, zda je položka v seznamu, takže byste <xref:System.Collections.Generic.List%601.IndexOf%2A>měli vždy zkontrolovat index vrácený společností . Pokud je -1, položka nebyla nalezena.


    Položky v seznamu lze také seřadit. Metoda <xref:System.Collections.Generic.List%601.Sort%2A> seřadí všechny položky v seznamu v normálním pořadí (abecedně v případě řetězců). Přidejte tento kód a spusťte znovu:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Seznamy jiných typů
  durationInMinutes: 5
  content: >
    Byl jste pomocí `string` typu v seznamech tak daleko. Pojďme udělat <xref:System.Collections.Generic.List%601> použití jiného typu. Sestavíme sadu čísel. Odstraňte kód, který jste dosud napsali, a nahraďte jej následujícím kódem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    To vytvoří seznam celá čísla a nastaví první dvě celá čísla na hodnotu 1. *Fibonacciho sekvence*, posloupnost čísel, začíná dvěma jedničkami. Každé další Fibonacciho číslo se najde součtem předchozích dvou čísel. Přidejte tento kód:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Stisknutím **tlačítka Spustit** zobrazíte výsledky.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Úloha
  durationInMinutes: 10
  content: >
    Uvidíme, jestli můžete dát dohromady některé pojmy z této a dřívější lekce. Rozšiřte to, co jste dosud vytvořili s Fibonacciho čísly. Zkuste a napsat kód generovat prvních 20 čísel v pořadí. (Jako náznak, 20. Fibonacciho číslo je 6765.)


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    S každou iteraci smyčky, budete mít poslední dvě celá čísla v seznamu, jejich sčítání a přidání této hodnoty do seznamu. Smyčka se opakuje, dokud do seznamu nepřidáte 20 položek.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste interaktivní kurz seznamu. To je poslední úvod do interaktivního kurzu jazyka C#. Můžete navštívit [web .NET a](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) stáhnout syp .NET Core SDK, vytvořit projekt v počítači a zachovat kódování. Část "Další kroky" vás vrátí zpět do těchto kurzů.


    Další informace o [kolekcích rozhraní .NET](../../../standard/collections/index.md) naleznete v následujících článcích:

    - [Výběr typu kolekce](../../../standard/collections/selecting-a-collection-class.md)

    - [Běžně používané typy kolekcí](../../../standard/collections/commonly-used-collection-types.md)

    - [Kdy použít obecné kolekce](../../../standard/collections/when-to-use-generic-collections.md)
