### YamlMime:Tutorial
title: 'Manipulace s čísly integrálových a plovoucích bodů v jazyce C #'
metadata:
  title: Čísla v C# – Úvod do interaktivního kurzu C#
  description: V tomto kurzu o číselných typech budete pomocí svého prohlížeče interaktivně pracovat s C#. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Větve a smyčky v C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: ac4f7318dc25fef9f612649f2c3f57a5142f3ead
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82860946"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte používat číselné typy v jazyce C# interaktivně pomocí prohlížeče. Budete psát C# a uvidíte výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které se zabývají čísly a matematickými operacemi v C#. V těchto kurzech se seznámíte se základy jazyka C#.
- title: Seznámení s matematikou celých čísel
  durationInMinutes: 4
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Pokud pracujete na svém prostředí, měli byste místo toho postupovat podle pokynů pro [místní verzi](numbers-in-csharp-local.md) .


    Viděli jste jednu ze základních matematických operací s celými čísly. Typ `int` představuje kladné nebo záporné **celé číslo**. Pro sčítání se používá symbol `+`. K dalším běžným matematickým operacím s celými čísly patří tyto:


    - `-` pro odčítání

    - `*` pro násobení

    - `/` pro dělení


    > [!TIP]

    > V tomto interaktivním kurzu se můžete podívat na vlastní, protože upravíte kód, který jste napsali v interaktivním okně. V tomto kurzu najdete příklady, které můžete vyzkoušet v každém kroku.


    Nejdřív si vyzkoušejte uvedené operace. Každou operaci si můžete vyzkoušet tak, že upravíte třetí řádek. Po každé úpravě vyberte tlačítko **Spustit** .


    Odčítání:


    ```csharp

    int c = a - b;

    ```


    Násobení:


    ```csharp

    int c = a * b;

    ```


    Dělení:


    ```csharp

    int c = a / b;

    ```


    Můžete také experimentovat vytvořením více matematických operací na stejném řádku, pokud byste chtěli.


    > [!TIP]

    > Když se budete učit pracovat s C# (nebo každým jiným programovacím jazykem), budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby odhalí a upozorní vás na ně. Pokud výstup obsahuje chybové zprávy, pečlivě si prohlédněte příklad kódu a kód v interaktivním okně, abyste zjistili, co je potřeba opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu v C#.
- title: Seznámení s pořadím operací
  durationInMinutes: 7
  content: >
    Jazyk C# definuje prioritu různých matematických operací v souladu se stejnými pravidly, jaká jste se naučili při hodinách matematiky.

    Násobení a dělení mají přednost před sčítáním a odčítáním.

    Vyzkoušejte si to spuštěním následujícího kódu v interaktivním okně:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Z výstupu vyplývá, že operace násobení se provede dřív než operace sčítání.


    Jiné pořadí operací můžete vynutit uzavřením operace nebo operací, které chcete provést jako první, do závorek:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Teď prozkoumáme i další možnosti s kombinací několika různých operací. Čtvrtý řádek výše uvedeného kódu nahraďte kódem podobným tomuto:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Můžete si u celých čísel všimnout zvláštního chování. Výsledkem dělení celých čísel je vždycky celé číslo, i když byste očekávali, že bude výsledek obsahovat číslo s desetinnou čárkou nebo zlomek.


    Pokud jste toto chování neviděli, vyzkoušejte následující kód:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky.
- title: Seznámení s přesností a limity celých čísel
  durationInMinutes: 5
  content: >
    Z poslední ukázky jste se dozvěděli, že při dělení celých čísel dochází ke zkrácení výsledku.

    **Zbytek** můžete získat pomocí operátoru **zbytek** , `%` znaku:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Od celých čísel v matematice se typ integer v jazyce C# se liší v jednom ohledu: typ `int` má minimální a maximální limit. Tyto limity zjistíte po spuštění tohoto kódu v interaktivním okně:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Pokud je výsledkem určitého výpočtu hodnota, která tyto limity překračuje, nastane stav **podtečení** nebo **přetečení**. Odpověď cyklicky přechází od jednoho limitu k druhému. Příklad zobrazíte přidáním těchto dvou řádků do interaktivního okna:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Všimněte si, že se odpověď těsně blíží minimálnímu (zápornému) celému číslu. Je stejná jako při operaci `min + 2`.

    Operace sčítání **přetekla** povolené hodnoty celých čísel.

    Výsledkem je velmi velké záporné číslo, protože při přetečení došlo k „cyklickému přechodu“ od nejvyšší možné celočíselné hodnoty k nejnižší.


    Existují i další číselné typy s různými limity a přesností, které můžete použít, pokud typ `int` nevyhovuje vašim potřebám. Pojďme prozkoumat tyto typy čísel.
- title: Práce s typem double
  durationInMinutes: 5
  content: "Číselný typ `double` představuje číslo s plovoucí desetinnou čárkou a dvojitou přesností. Tyto výrazy možná ještě neznáte. Číslo s **plovoucí desetinnou čárkou** slouží k reprezentaci jiných než celých čísel, která mohou být buď velmi nízká, nebo velmi vysoká. **Dvojitá přesnost** je relativní termín, který popisuje počet binárních číslic, které se používají k uložení hodnoty. **Dvojité číslo přesnosti** má dvojnásobek počtu binárních číslic jako **jednoduchých přesností**. V moderních počítačích se častěji používají čísla s dvojitou přesností než s jednoduchou přesností. Čísla s **jednou přesností** jsou deklarována pomocí `float` klíčového slova.\nPojďme se na to podívat blíž. Zadejte do interaktivního okna následující kód a podívejte se na výsledek:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nVšimněte si, že odpověď obsahuje desetinnou část podílu. Teď zkusíme zadat o něco složitější výraz s čísly typu double:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nRozsah hodnoty double je mnohem větší než u hodnot typu integer. Spusťte v interaktivním okně následující kód:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nHodnoty jsou uvedené za použití vědeckého zápisu čísel. Číslu vlevo od písmene `E` se říká mantisa. Číslo vpravo se označuje jako exponent a značí násobky 10.\n\nStejně jako desetinná čísla v matematice můžou mít i hodnoty typu double v C# chyby zaokrouhlení. Vyzkoušejte tento kód:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nVíte, že `0.3` je `3/10` , a ne přesně stejné jako `1/3`. Podobně `0.33` je `33/100`. To je bližší `1/3`, ale pořád ne přesně. \n\n***Úloha***\n\nVyzkoušejte další výpočty s velkými čísly, malými čísly, násobení a dělení `double` pomocí typu.  Zkuste zadat i složitější výpočty.\n"
- title: Práce s typy Decimal
  durationInMinutes: 8
  content: >
    Seznámili jste se se základními typy čísel v jazyce C#: celými čísly a čísly s dvojitou přesností.  Existuje jeden další typ, který se naučí: `decimal` typ. Typ `decimal` má menší rozsah, ale zato větší přesnost než typ `double`. Podívejme se na to:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Všimněte si, že je rozsah menší než u typu `double`. Větší přesnost typu decimal si můžete ověřit zadáním následujícího kódu:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Přípona `M` za čísly představuje způsob, jak naznačit, že má konstanta používat typ `decimal`.


    Všimněte si, že výsledek s typem decimal má napravo od desetinné čárky víc číslic.


    Přípona `M` za čísly představuje způsob, jak naznačit, že má konstanta používat typ `decimal`. V opačném případě kompilátor předpokládá `double` typ.


    > [!NOTE]

    > Písmeno `M` bylo vybráno jako nejvizuálně jedinečné písmeno mezi klíčovými `double` slovy `decimal` a.


    Všimněte si, že výsledek s typem decimal má napravo od desetinné čárky víc číslic.


    ***Úloha***


    Seznámili jste se s různými typy čísel a teď můžete napsat kód, který vypočítá obsah kruhu s poloměrem 2,50 centimetru. Obsah kruhu se vypočítá jako poloměr na druhou krát číslo pí. Nápověda: Prostředí .NET obsahuje pro číslo pí konstantu <xref:System.Math.PI?displayProperty=nameWithType>, kterou můžete pro tuto hodnotu použít. <xref:System.Math.PI?displayProperty=nameWithType>Podobně jako všechny konstanty deklarované v `System.Math` oboru názvů je `double` hodnota. Z `double` `decimal` tohoto důvodu byste měli použít místo hodnot pro tuto výzvu.


    Měl by vám vyjít výsledek mezi 19 a 20.
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Jestli chcete, můžete si vyzkoušet i další vzorce.
- content: >
    Dokončili jste Interaktivní kurz "čísla v jazyce C#". Kliknutím na odkaz **větve a smyčky** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o číslech v jazyce C# najdete v následujících článcích:


    - [Celočíselné typy](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Číselné typy s plovoucí desetinnou čárkou](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Předdefinované číselné převody](../../language-reference/builtin-types/numeric-conversions.md)
