### YamlMime:Tutorial
title: Manipulace s integrálními čísly a čísly s plovoucí desetinnou čárkouC#
metadata:
  title: Čísla v C# seznámení C# s interaktivním kurzem
  description: V tomto kurzu o číselných typech použijete prohlížeč k interaktivnímu Projděte C# . Budete psát C# kód a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Větve a smyčky vC#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: b417ba7ff340019c74b0c3430242f59d6217b07f
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969356"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se seznámíte s číselnými typy C# v interaktivním prostředí pomocí prohlížeče pro zápis C# a zobrazení výsledků kompilace a spuštění kódu. Obsahuje řadu lekcí, které prozkoumají čísla a matematické operace v C#. V těchto lekcích se naučíte základy C# jazyka.
- title: Prozkoumat celočíselné matematické
  durationInMinutes: 4
  content: >
    Spusťte následující kód v interaktivním okně. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Pokud ve svém prostředí používáte, měli byste místo toho postupovat podle pokynů pro [místní verzi](numbers-in-csharp-local.md) .


    Právě jste viděli jednu ze základních matematických operací s celými čísly. Typ `int` představuje **celé číslo**, kladné nebo záporné celé číslo. K přidání můžete použít symbol `+`. Mezi další běžné matematické operace pro celá čísla patří:


    - `-` pro odčítání

    - `*` pro násobení

    - `/` pro dělení


    > [!TIP]

    > V tomto interaktivním kurzu se můžete podívat na vlastní, protože upravíte kód, který jste napsali v interaktivním okně. V tomto kurzu najdete příklady, které můžete vyzkoušet v každém kroku.


    Začněte tím, že prozkoumáte tyto různé operace. Upravte třetí řádek a vyzkoušejte každou z těchto operací. Po každé úpravě vyberte tlačítko **Spustit** .


    Odčítání


    ```csharp

    int c = a - b;

    ```


    Násobení


    ```csharp

    int c = a * b;

    ```


    Dělení


    ```csharp

    int c = a / b;

    ```


    Můžete také experimentovat při provádění více matematických operací na stejném řádku, pokud byste chtěli.


    > [!TIP]

    > Při prozkoumávání C# (nebo jakémkoli programovacím jazyce) budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby vyhledá a nahlásí je. V případě, že výstup obsahuje chybové zprávy, pečlivě si prohlédněte vzorový kód a kód v interaktivním okně, kde zjistíte, co je třeba opravit.

    > Toto cvičení vám pomůže zjistit strukturu C# kódu.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Prozkoumat pořadí operací
  durationInMinutes: 7
  content: >
    C# Jazyk definuje prioritu různých matematických operací s pravidly, která jsou v souladu s pravidly, která jste se naučili v matematice.

    Násobení a dělení mají přednost před sčítáním a odčítáním.

    Prozkoumejte to spuštěním následujícího kódu v interaktivním okně:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Výstup ukazuje, že násobení je provedeno před sčítáním.


    Můžete vynutit jiné pořadí operací přidáním závorek kolem operace nebo operací, které chcete provést jako první:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Kombinování různých operací vám umožní prozkoumat víc. Výše uvedený čtvrtý řádek nahraďte podobným způsobem:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Možná jste si všimli zajímavého chování pro celá čísla. Celočíselné dělení vždy vytváří celočíselný výsledek, i když byste očekávali, že by výsledek zahrnoval desítkovou nebo zlomkovou část.


    Pokud jste toto chování neviděli, vyzkoušejte následující:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Prozkoumat celočíselnou přesnost a omezení
  durationInMinutes: 5
  content: >
    Poslední ukázka ukázala, že dělení celého čísla zkráte výsledek.

    **Zbytek** můžete získat pomocí operátoru **modulo** , `%`ho znaku:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    C# Celočíselný typ se liší od matematických celých čísel jiným způsobem: typ `int` má minimální a maximální limity. Spusťte tento kód v interaktivním okně, abyste viděli tato omezení:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Pokud výpočet vytvoří hodnotu, která překračuje tato omezení, **dojde k podtečení nebo** **podtečení** . Odpověď se zobrazí jako zabalení od jednoho limitu k druhému. Přidejte tyto dva řádky do interaktivního okna a podívejte se na příklad:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Všimněte si, že odpověď se velmi blíží minimálnímu (zápornému) celému číslu. Je stejný jako `min + 2`.

    Operace sčítání **přetéká** povolené hodnoty pro celá čísla.

    Odpověď je velmi velké záporné číslo, protože přetečení se zalomí od největší možné celočíselné hodnoty k nejmenší.


    Existují i jiné číselné typy s různými limity a přesností, které byste použili, když `int` typ nevyhovuje vašim potřebám. Pojďme se podívat na další.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s typem Double
  durationInMinutes: 5
  content: >
    `double` číselný typ představuje číslo s dvojitou přesností s plovoucí desetinnou čárkou. Tyto výrazy můžou být pro vás nové. Číslo s **plovoucí desetinnou** čárkou je užitečné k vyjádření neintegrálních čísel, která mohou být velmi velká nebo malá. **Dvojitá přesnost** znamená, že se tato čísla ukládají s větší přesností než s **jednoduchou přesností**. Na moderních počítačích je častější používat dvojitou přesnost než čísla s jednoduchou přesností.

    Pojďme prozkoumat. V interaktivním okně vyzkoušejte následující kód a podívejte se na výsledek:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Všimněte si, že odpověď obsahuje desetinnou část podílu. Vyzkoušejte trochu složitější výraz s dvojitou přesností:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Rozsah hodnoty Double je mnohem větší než celočíselné hodnoty. V interaktivním okně zkuste použít následující kód:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Tyto hodnoty se tisknou v matematickém zápisu. Číslo nalevo od `E` je mantisa. Číslo vpravo je exponent, jako mocnina 10.


    Stejně jako desítková čísla v matematických případech můžou C# být v uvozovkách chyby zaokrouhlení. Vyzkoušejte tento kód:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Víte, že `0.3` opakující se, není naprosto stejný jako `1/3`.


    ***Výzev***


    Vyzkoušejte další výpočty s velkými čísly, malými čísly, násobení a dělení pomocí `double`ho typu.  Vyzkoušejte složitější výpočty.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s pevnými typy bodů
  durationInMinutes: 8
  content: >
    Viděli jste základní číselné typy v C#: celá čísla a Dvojitá přesnost.  Existuje jeden další typ, se kterým se naučíte: `decimal` typ. Typ `decimal` má menší rozsah, ale větší přesnost než `double`. **Pevný** bod znamená, že desetinná čárka (nebo binární bod) nepřesouvá. Pojďme se podívat:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Všimněte si, že rozsah je menší než `double` typ. Větší přesnost s typem Decimal můžete zobrazit tak, že zkusíte následující kód:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Přípona `M` na číslech představuje způsob, jakým by měla konstanta používat typ `decimal`.


    Všimněte si, že matematický použití typu Decimal má na pravé straně desetinné čárky více číslic.


    ***Výzev***


    Teď, když jste viděli různé číselné typy, napište kód, který vypočítá oblast kruhu, jehož poloměr je 2,50 centimetrů. Pamatujte, že oblast kruhu je poloměr čtvercového vynásobený hodnotou pí. Jedna Nápověda: .NET obsahuje konstantu pro PI, <xref:System.Math.PI?displayProperty=nameWithType>, kterou můžete použít pro tuto hodnotu.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).


    Měli byste získat odpověď mezi 19 a 20.
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Pracovali jste s podobným způsobem?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Pokud chcete, zkuste použít jiné vzorce.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste "čísla" v C#interaktivním kurzu. Kliknutím na odkaz **větve a smyčky** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o číslech v C# najdete v následujících tématech:


    - [Celočíselné číselné typy](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Číselné typy s plovoucí desetinnou čárkou](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Předdefinované číselné převody](../../language-reference/builtin-types/numeric-conversions.md)
