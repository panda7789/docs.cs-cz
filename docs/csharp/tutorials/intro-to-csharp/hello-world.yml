### YamlMime:Tutorial
title: Hello World - Úvod do C# interaktivní C# tutorial
metadata:
  title: Hello World - Úvod do C# interaktivní C# tutorial
  description: V tomto kurzu budete používat prohlížeč učit C# interaktivně. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Čísla v jazyce C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 6e3742991820a8805b3c9b57767079940899d8fc
  ms.sourcegitcommit: 2514f4e3655081dcfe1b22470c0c28500f952c42
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 03/18/2020
  ms.locfileid: "79507006"
items:
- durationInMinutes: 1
  content: >
    Tento kurz vás naučí C# interaktivně pomocí prohlížeče k zápisu C# a zobrazit výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které začínají programem „Hello World“. V těchto kurzech se seznámíte se základy jazyka C#.
- title: Spuštění prvního programu v C#
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko **Enter focus mode** . Potom zadejte do interaktivního okna následující blok kódu a vyberte **Spustit**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Blahopřejeme! Právě jste spustili svůj první program v C#. Je to jednoduchý program, který zobrazí zprávu „Hello World!“. K zobrazení této zprávy použil metodu <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` je typ, který představuje okno konzoly. `WriteLine` je metoda typu `Console`, která zobrazí v této textové konzole řádek textu.


    Pojďme se posunout dál. Zbytek této lekce se zabývá prací s typem `string`, který v jazyce C# představuje text. Stejně jako typ `Console` má i typ `string` svoje metody. Metody `string` pracují s textem.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarace a používání proměnných
  durationInMinutes: 3
  content: >
    Váš první program napsal na obrazovku zprávu „Hello World!“ typu `string` .


    > [!TIP]

    > Když se budete učit pracovat s C# (nebo každým jiným programovacím jazykem), budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby odhalí a upozorní vás na ně. Pokud výstup obsahuje chybové zprávy, pečlivě si prohlédněte příklad kódu a kód v interaktivním okně, abyste zjistili, co je potřeba opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu v C#.


    Váš první program se omezuje na zobrazení jedné určité zprávy. S využitím **proměnných** ale můžete napsat i užitečnější programy. **Proměnná** je symbol, pomocí kterého můžete spustit stejný kód s různými hodnotami. Pojďme si to vyzkoušet! Nahraďte kód, který jste napsali v interaktivním okně, následujícím kódem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    První řádek deklaruje proměnnou `aFriend` a přiřazuje jí hodnotu „Bill“. Druhý řádek jméno zobrazí.


    Každé deklarované proměnné můžete přiřadit víc hodnot. Jméno můžete změnit na jméno některého ze svých přátel. Do interaktivního okna přidejte za kód, který jste do něj už zadali, následující dva řádky:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Všimněte si, že stejný řádek kódu vytiskne dvě různé zprávy podle toho, jaká hodnota je uložená v proměnné `aFriend`.


    Možná jste si taky všimli, že v posledních dvou zprávách chybí slovo „Hello“. Pojďme to napravit.  Upravte řádky, které zobrazují zprávu, následujícím způsobem:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    **Chcete-li** zobrazit výsledky, vyberte znovu spustit.


    Jste používali `+` k vytváření řetězců z **proměnných** a **konstantní** řetězce. Existuje lepší způsob.

    Můžete umístit proměnnou `{` `}` mezi a znaky sdělit C# nahradit tento text s hodnotou proměnné.


    Tose nazývá [string interpolace](../../language-reference/tokens/interpolated.md).


    Pokud přidáte `$` před počáteční uvozovky řetězce, můžete zahrnout proměnné, jako je `aFriend`, uvnitř řetězce mezi složené závorky. Zkuste to:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    **Chcete-li** zobrazit výsledky, vyberte znovu spustit. Místo "Hello {aFriend}, zpráva by měla být "Hello Maira".


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s řetězci
  durationInMinutes: 5
  content: >
    S poslední úpravou kódu jste poprvé nahlédli do toho, co všechno se dá provádět s řetězci. Pojďme se na to podívat blíž.


    Nejste omezeni na jednu proměnnou mezi složenými závorkami. Vyzkoušejte tohle:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Jak si prohlédnout více s řetězci, zjistíte, že řetězce jsou více než kolekce dopisů. Délku řetězce najdete pomocí `Length`aplikace . `Length` je **vlastnost** řetězce, která vrátí počet znaků daného řetězce. Na konec interaktivního okna přidejte následující kód:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Teď je vhodná chvíle, abyste si to vyzkoušeli sami. Naučili jste se, že metoda `Console.WriteLine()` napíše na obrazovku text. Dozvěděli jste se, jak deklarovat proměnné a řetězit řetězce. Teď můžete v interaktivním okně experimentovat. Okno obsahuje funkci nazvanou **IntelliSense,** která navrhuje, co můžete dělat. Za `.` dejte `d` a `firstFriend`za in . Zobrazí se seznam návrhů vlastností a metod, které můžete použít.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Další úkony s řetězci
  durationInMinutes: 5
  content: >
    K tisku zpráv používáte <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> **metodu**, . **Metoda** je blok kódu, který implementuje určitou akci. Má určitý název, abyste k ní mohli získat přístup.


    Předpokládejme, že řetězce mají úvodní nebo koncové mezery, které nechcete zobrazit. Chcete **oříznout** mezery z řetězců.

    Metoda <xref:System.String.Trim%2A> a související <xref:System.String.TrimStart%2A> <xref:System.String.TrimEnd%2A> metody a dělat, že práce. Tyto metody můžete použít pouze k odstranění úvodních a koncových mezer. Zkuste zadat následující kód:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Tato ukázka zdůrazňuje pár důležitých konceptů, které je při práci s řetězci potřeba znát. Metody, které manipulují s řetězci, neprovádějí úpravy, ale vrací nové objekty řetězců. Můžete vidět, že každé volání `Trim` některé z metod vrátí nový řetězec, ale nezmění původní zprávu.


    Práci s řetězcem umožňují taky další metody. Například jste pravděpodobně použili příkaz hledat a nahradit v editoru nebo textovém procesoru dříve. Metoda <xref:System.String.Replace%2A> dělá něco podobného v řetězci. Vyhledá podřetězec a nahradí jej jiným textem. Metoda <xref:System.String.Replace%2A> má dva **parametry**. To jsou řetězce v závorkách. První řetězec představuje hledaný text. Druhý řetězec představuje text, kterým se má hledaný text nahradit. Vyzkoušejte si to sami. Přidejte tento kód. Zadejte jej, abyste viděli rady, `.Re` když `sayHello` začnete psát za proměnnou:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Další dvě užitečné metody změní řetězec na text VELKÝMI PÍSMENY nebo text malými písmeny. Vyzkoušejte následující kód. Zadejte jej, abyste viděli, jak **technologie IntelliSense** poskytuje rady při psaní `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Hledání řetězců
  durationInMinutes: 10
  content: >
    Druhá část operace *Najít a nahradit* spočívá v hledání textu v řetězci. K vyhledání můžete použít metodu <xref:System.String.Contains%2A>. Ta vám zjistí, jestli některý řetězec obsahuje určitý dílčí řetězec. Metodu <xref:System.String.Contains%2A> si můžete vyzkoušet zadáním následujícího kódu:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> vrátí **logickou** hodnotu, která udává, jestli metoda našla hledaný řetězec. **Logická** hodnota uloží hodnotu `true` nebo `false`. Jsou-li zobrazeny jako textový výstup, jsou velkými písmeny: `True` a `False`, v uvedeném pořadí. Další informace o **logických** hodnotách se dozvíte v některé z pozdějších lekcí.


    ***Úloha***


    K hledání dílčích řetězců v rámci řetězce existují ještě dvě podobné metody, <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A>. Ty vyhledají dílčí řetězec na začátku nebo na konci řetězce. Zkuste upravit předchozí ukázku a místo metody <xref:System.String.Contains%2A> použít metody <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A>. Vyhledejte slova „You“ nebo „goodbye“ na začátku řetězce. Vyhledejte slova „hello“ nebo „goodbye“ na konci řetězce.


    > [!NOTE]

    > Při vyhledávání textu na konci řetězce si dávejte pozor na interpunkci. Pokud řetězec končí tečkou, musíte hledat řetězec končící tečkou.


    Při hledání dílčího řetězce „You“ na začátku a „hello“ na konci by se vám měla vrátit hodnota `true`, kdežto při hledání dílčího řetězce „goodbye“ na začátku i na konci by se měla vrátit hodnota false.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste úvod "Hello C#" do kurzu jazyka C#. Můžete vybrat **čísla v C#** odkaz níže spustit další interaktivní kurz, nebo můžete navštívit [web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) stáhnout .NET Core SDK, vytvořit projekt na vašem počítači a udržet kódování. Část "Další kroky" vás vrátí zpět do těchto kurzů.


    Pro další čtení `string` na typu:

    - [Téma Průvodce programováním](../../programming-guide/index.md) jazyka C# na [řetězce](../../programming-guide/strings/index.md).

    - [Jak tipy na práci s řetězci](../../how-to/index.md#working-with-strings).
