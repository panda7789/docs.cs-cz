### YamlMime:Tutorial
title: Hello World – Úvod do C# interaktivního kurzu c#
metadata:
  title: Hello World – Úvod do C# interaktivního kurzu c#
  description: V tomto kurzu použijete v prohlížeči interaktivní informace v jazyce C#. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Čísla v jazyce C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 72198287028c73f0e518d7bcfd0b694bb267e132
  ms.sourcegitcommit: 9c45035b781caebc63ec8ecf912dc83fb6723b1f
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 08/25/2020
  ms.locfileid: "88812273"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte interaktivně pracovat s C#, pomocí prohlížeče psát C# a zobrazovat výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které začínají programem „Hello World“. V těchto kurzech se seznámíte se základy jazyka C#.
- title: Spuštění prvního programu v C#
  durationInMinutes: 2
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Gratulujeme! Právě jste spustili svůj první program v C#. Je to jednoduchý program, který zobrazí zprávu „Hello World!“. K zobrazení této zprávy použil metodu <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` je typ, který představuje okno konzoly. `WriteLine` je metoda typu `Console`, která zobrazí v této textové konzole řádek textu.


    Pojďme se posunout dál. Zbytek této lekce se zabývá prací s typem `string`, který v jazyce C# představuje text. Stejně jako typ `Console` má i typ `string` svoje metody. Metody `string` pracují s textem.
- title: Deklarace a používání proměnných
  durationInMinutes: 3
  content: >
    Váš první program napsal na obrazovku zprávu „Hello World!“ typu `string` .


    > [!TIP]

    > Když se budete učit pracovat s C# (nebo každým jiným programovacím jazykem), budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby odhalí a upozorní vás na ně. Pokud výstup obsahuje chybové zprávy, pečlivě si prohlédněte příklad kódu a kód v interaktivním okně, abyste zjistili, co je potřeba opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu v C#.


    Váš první program se omezuje na zobrazení jedné určité zprávy. S využitím *proměnných* ale můžete napsat i užitečnější programy. *Proměnná* je symbol, pomocí kterého můžete spustit stejný kód s různými hodnotami. Pojďme si to vyzkoušet! Nahraďte kód, který jste napsali v interaktivním okně, následujícím kódem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    První řádek deklaruje proměnnou, `aFriend` a přiřadí jí hodnotu "fakturovat". Druhý řádek jméno zobrazí.


    Každé deklarované proměnné můžete přiřadit víc hodnot. Jméno můžete změnit na jméno některého ze svých přátel. Do interaktivního okna přidejte za kód, který jste do něj už zadali, následující dva řádky:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Všimněte si, že stejný řádek kódu vytiskne dvě různé zprávy podle toho, jaká hodnota je uložená v proměnné `aFriend`.


    Možná jste si taky všimli, že v posledních dvou zprávách chybí slovo „Hello“. Pojďme to napravit.  Upravte řádky, které zobrazují zprávu, následujícím způsobem:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky.


    Používali jste `+` k vytváření řetězců z **proměnných** a **konstantních** řetězců. Existuje lepší způsob.

    Můžete umístit proměnnou mezi `{` a `}` znaků, aby jazyk C# nahradil tento text hodnotou proměnné.


    Tato metoda se nazývá [interpolace řetězce](../../language-reference/tokens/interpolated.md).


    Pokud přidáte `$` před levou počáteční uvozovku řetězce, můžete do `aFriend` řetězce mezi složenými závorkami zahrnout proměnné, jako například. Vydejte to try:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky. Místo "Hello {aFriend}" by měla být zpráva "Hello Maira".
- title: Práce s řetězci
  durationInMinutes: 5
  content: >
    S poslední úpravou kódu jste poprvé nahlédli do toho, co všechno se dá provádět s řetězci. Pojďme se na to podívat blíž.


    Nejste omezeni na jednu proměnnou mezi složenými závorkami. Vyzkoušejte následující:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Při zkoumání více pomocí řetězců zjistíte, že řetězce jsou větší než kolekce písmen. Délku řetězce můžete najít pomocí `Length` . `Length` je **vlastnost** řetězce, která vrátí počet znaků daného řetězce. Na konec interaktivního okna přidejte následující kód:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Teď je vhodná chvíle, abyste si to vyzkoušeli sami. Naučili jste se, že metoda `Console.WriteLine()` napíše na obrazovku text. Dozvěděli jste se, jak deklarovat proměnné a řetězit řetězce. Teď můžete v interaktivním okně experimentovat. Okno obsahuje funkci s názvem *IntelliSense* , která dává návrhy na to, co můžete dělat. Zadejte `.` za `d` v `firstFriend` . Zobrazí se seznam návrhů pro vlastnosti a metody, které můžete použít.
- title: Další úkony s řetězci
  durationInMinutes: 5
  content: >
    Použili jste *metodu* <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> pro tisk zpráv. *Metoda* je blok kódu, který implementuje určitou akci. Má určitý název, abyste k ní mohli získat přístup.


    Předpokládejme, že vaše řetězce mají na začátku nebo na konci mezery, které nechcete zobrazit. Chcete **oříznout** mezery z řetězců.

    <xref:System.String.Trim%2A>Metoda a související metody <xref:System.String.TrimStart%2A> a <xref:System.String.TrimEnd%2A> provede tuto práci. Tyto metody můžete použít jenom k odebrání počátečních a koncových mezer. Zkuste zadat následující kód:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Hranaté závorky `[` a `]` pomůžou vizualizovat `Trim` , co `TrimStart` `TrimEnd` metody a dělají. Hranaté závorky ukazují, kde začíná a končí prázdné znaky.


    Tato ukázka zdůrazňuje pár důležitých konceptů, které je při práci s řetězci potřeba znát. Metody, které manipulují s řetězci, neprovádějí úpravy, ale vrací nové objekty řetězců. Můžete vidět, že každé volání libovolné `Trim` metody vrátí nový řetězec, ale původní zprávu nezmění.


    Práci s řetězcem umožňují taky další metody. Například jste pravděpodobně použili příkaz Hledat a nahradit v editoru nebo textovém procesoru před. <xref:System.String.Replace%2A>Metoda dělá něco podobného v řetězci. Vyhledá podřetězec a nahradí ho jiným textem. Metoda <xref:System.String.Replace%2A> má dva **parametry**. To jsou řetězce v závorkách. První řetězec představuje hledaný text. Druhý řetězec představuje text, kterým se má hledaný text nahradit. Vyzkoušejte si to sami. Přidejte tento kód. Zadejte ho do, abyste viděli nápovědu při psaní `.Re` za `sayHello` proměnnou:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Další dvě užitečné metody změní řetězec na text VELKÝMI PÍSMENY nebo text malými písmeny. Vyzkoušejte následující kód. Zadejte ho do a podívejte se, jak **IntelliSense** poskytuje tipy jako při psaní `To` :


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```
- title: Hledání řetězců
  durationInMinutes: 10
  content: >
    Druhá část operace *Najít a nahradit* spočívá v hledání textu v řetězci. K vyhledání můžete použít metodu <xref:System.String.Contains%2A>. Ta vám zjistí, jestli některý řetězec obsahuje určitý dílčí řetězec. Metodu <xref:System.String.Contains%2A> si můžete vyzkoušet zadáním následujícího kódu:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> vrátí *logickou* hodnotu, která udává, jestli metoda našla hledaný řetězec. *Logická* hodnota uloží hodnotu `true` nebo `false`. Když se zobrazí jako textový výstup, jsou velkými písmeny: `True` a v `False` uvedeném pořadí. Další informace o *logických* hodnotách se dozvíte v některé z pozdějších lekcí.


    ***Úkol***


    K hledání dílčích řetězců v rámci řetězce existují ještě dvě podobné metody, <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A>. Ty vyhledají dílčí řetězec na začátku nebo na konci řetězce. Zkuste upravit předchozí ukázku a místo metody <xref:System.String.Contains%2A> použít metody <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A>. Vyhledejte slova „You“ nebo „goodbye“ na začátku řetězce. Vyhledejte slova „hello“ nebo „goodbye“ na konci řetězce.


    > [!NOTE]

    > Při vyhledávání textu na konci řetězce si dávejte pozor na interpunkci. Pokud řetězec končí tečkou, musíte hledat řetězec končící tečkou.


    Při hledání dílčího řetězce „You“ na začátku a „hello“ na konci by se vám měla vrátit hodnota `true`, kdežto při hledání dílčího řetězce „goodbye“ na začátku i na konci by se měla vrátit hodnota false.
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```
- content: >-
    Dokončili jste kurz "Hello C#" Úvod do jazyka C#. Kliknutím na odkaz **čísla v jazyce C#** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Pro další čtení `string` typu:

    - Téma [Průvodce programováním v C#](../../programming-guide/index.md) pro [řetězce](../../programming-guide/strings/index.md).

    - [Tipy pro práci s řetězci](../../how-to/index.md#working-with-strings).
