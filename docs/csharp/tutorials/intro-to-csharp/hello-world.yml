### YamlMime:Tutorial
title: Hello World – Úvod do C# interaktivního C# kurzu
metadata:
  title: Hello World – Úvod do C# interaktivního C# kurzu
  description: V tomto kurzu použijete prohlížeč pro interaktivní informace C# . Napíšete C# kód a zobrazíte výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Čísla v jazyce C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 365cf0b2ef36dd0be624d022e3dea5e16a9eb58c
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969411"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se interaktivně C# naučíte používat prohlížeč k psaní C# a zobrazení výsledků kompilace a spuštění kódu. Obsahuje řadu lekcí, které začínají programem "Hello World". V těchto lekcích se naučíte základy C# jazyka.
- title: Spustit první C# program
  durationInMinutes: 2
  content: >
    Spusťte následující kód v interaktivním okně. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Blahopřejeme! Spustili jste svůj první C# program. Jedná se o jednoduchý program, který tiskne zprávu "Hello World!". K vytištění této zprávy používala metodu <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` je typ, který představuje okno konzoly. `WriteLine` je metoda typu `Console`, která na tuto textovou konzoli tiskne řádek textu.


    Pojďme se přemístit a prozkoumat další. Zbytek této lekce zkoumá práci s typem `string`, který představuje text v C#. Podobně jako typ `Console`, má `string` typ metody. Metody `string` fungují s textem.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarace a používání proměnných
  durationInMinutes: 3
  content: >
    Váš první program vytiskl `string` "Hello World!" na obrazovce.


    > [!TIP]

    > Při prozkoumávání C# (nebo jakémkoli programovacím jazyce) budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby vyhledá a nahlásí je. V případě, že výstup obsahuje chybové zprávy, pečlivě si prohlédněte vzorový kód a kód v interaktivním okně, kde zjistíte, co je třeba opravit.

    > Toto cvičení vám pomůže zjistit strukturu C# kódu.


    Váš první program je omezený na tisk jedné zprávy. Pomocí **proměnných**můžete napsat užitečnější programy. **Proměnná** je symbol, který můžete použít ke spuštění stejného kódu s různými hodnotami. Pojďme si to! Kód, který jste napsali v interaktivním okně, nahraďte následujícím kódem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    První řádek deklaruje proměnnou `aFriend` a přiřadí jí hodnotu "fakturovat". Druhý řádek vytiskne název.


    Můžete přiřadit jiné hodnoty k libovolné proměnné, kterou deklarujete. Název můžete změnit na některého z vašich přátel. Přidejte tyto dva řádky do interaktivního okna za kód, který jste už přidali:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Všimněte si, že stejný řádek kódu vytiskne dvě různé zprávy na základě hodnoty uložené v proměnné `aFriend`.


    Možná jste si také všimli, že v posledních dvou zprávách chybí slovo "Hello". Pojďme to teď opravit.  Upravte řádky, které tisknou zprávu, do následujících:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky.


    Používali jste `+` k vytváření řetězců z **proměnných** a **konstantních** řetězců. Existuje lepší způsob.

    Můžete umístit proměnnou mezi `{` a `}` znaků, aby C# text byl nahrazen hodnotou proměnné.


    Tato metoda se nazývá [interpolace řetězce](../../language-reference/tokens/interpolated.md).


    Pokud přidáte `$` před počáteční uvozovku řetězce, můžete do řetězce mezi složenými závorkami zahrnout proměnné, jako je `aFriend`. Vydejte to try:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Vyberte znovu **Spustit** , aby se zobrazily výsledky. Místo "Hello {aFriend}" by měla být zpráva "Hello Maira".


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s řetězci
  durationInMinutes: 5
  content: >
    Poslední úprava byla první pohled na to, co můžete s řetězci dělat. Pojďme prozkoumat víc.


    Nejste omezeni na jednu proměnnou mezi složenými závorkami. Vyzkoušejte tuto akci:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Při zkoumání více pomocí řetězců zjistíte, že řetězce jsou větší než kolekce písmen. Délku řetězce můžete najít pomocí `Length`. `Length` je **vlastnost** řetězce a vrátí počet znaků v řetězci. Do dolní části interaktivního okna přidejte následující kód:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > To je vhodný čas k tomu, abyste se seznámili sami. Seznámili jste se s tím, že `Console.WriteLine()` zapisuje text na obrazovku. Zjistili jste, jak deklarovat proměnné a zřetězit řetězce společně. Experimentujte v interaktivním okně. Okno obsahuje funkci s názvem **IntelliSense** , která dává návrhy na to, co můžete dělat. Zadejte `.` za `d` v `firstFriend`. Zobrazí se seznam návrhů pro vlastnosti a metody, které můžete použít.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Další s řetězci
  durationInMinutes: 5
  content: >
    K tisku zpráv jste používali **metodu**<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. **Metoda** je blok kódu, který implementuje určitou akci. Má název, takže k němu máte přístup.


    Předpokládejme, že vaše řetězce mají na začátku nebo na konci mezery, které nechcete zobrazit. Chcete **oříznout** mezery z řetězců.

    Metoda <xref:System.String.Trim%2A> a související metody <xref:System.String.TrimStart%2A> a <xref:System.String.TrimEnd%2A> tuto práci. Tyto metody můžete použít jenom k odebrání počátečních a koncových mezer. Vyzkoušejte následující kód:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Tato ukázka posílí několik důležitých konceptů pro práci s řetězci. Metody, které pracují s řetězci, vracejí nové objekty řetězce místo provedení úprav. Můžete vidět, že každé volání metody `Trim` vrátí nový řetězec, ale původní zprávu nezmění.


    K dispozici jsou jiné metody, které lze použít pro práci s řetězcem. Například jste pravděpodobně použili příkaz Hledat a nahradit v editoru nebo textovém procesoru před. Metoda <xref:System.String.Replace%2A> dělá něco podobného v řetězci. Vyhledá podřetězec a nahradí ho jiným textem. Metoda <xref:System.String.Replace%2A> přijímá dva **parametry**. Jedná se o řetězce mezi závorkami. Prvním řetězcem je text, který se má vyhledat. Druhý řetězec je text, který má být nahrazen. Vyzkoušejte si to sami. Přidejte tento kód. Zadejte ho do, abyste viděli nápovědu při psaní `.Re` po `sayHello` proměnné:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dvě další užitečné metody tvoří řetězce pro všechna velká písmena a malá písmena. Vyzkoušejte následující kód. Zadejte ho do a podívejte se, jak **IntelliSense** poskytuje tipy, jako když začnete psát `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Hledání řetězců
  durationInMinutes: 10
  content: >
    Druhou částí operace *hledání a nahrazení* je vyhledat text v řetězci. Můžete použít metodu <xref:System.String.Contains%2A> pro hledání. Oznamuje vám, že pokud řetězec obsahuje podřetězec, který je uvnitř něj obsažený. Vyzkoušejte následující kód, abyste prozkoumali <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> vrací **logickou** hodnotu, která oznamuje, zda byl nalezen hledaný řetězec. **Logická** hodnota ukládá buď `true`, nebo hodnotu `false`. V pozdější lekci se dozvíte víc o **logických** hodnotách.


    ***Výzev***


    Existují dvě podobné metody <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A>, které také hledají dílčí řetězce v řetězci. Ty vyhledají podřetězec na začátku nebo na konci řetězce. Zkuste změnit předchozí vzorek tak, aby používal <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A> namísto <xref:System.String.Contains%2A>. Hledání "na" nebo "rozdálení" na začátku řetězce. Hledejte text "Hello" nebo "rozdálení" na konci řetězce.


    > [!NOTE]

    > Sledujte interpunkční znaménka při testování textu na konci řetězce. Pokud řetězec končí tečkou, je nutné vyhledat řetězec, který končí tečkou.


    Měli byste `true` začít od "" vy "a končit" Hello "a false pro od" nekonečno ".


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Pracovali jste s podobným způsobem?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste úvodní C# kurz " C#Hello". Kliknutím **na C# následující odkaz můžete** spustit další interaktivní kurz, nebo můžete navštívit [Web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Pro další čtení `string`ho typu:

    - Téma průvodce [](../../programming-guide/strings/index.md) [programováním pro C# ](../../programming-guide/index.md) řetězce.

    - [Tipy pro práci s řetězci](../../how-to/index.md#working-with-strings).
