### YamlMime:Tutorial
title: Další informace o podmíněné logice s příkazy větví a smyček
metadata:
  title: Větve a smyčky – Úvod k interaktivnímu kurzu C#
  description: V tomto kurzu o větvích a cyklech se v prohlížeči naučí interaktivně pracovat s jazykem C#. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekce seznamů
  ms.openlocfilehash: 596dfeca6e8910bd954b63364af958b7bef1580a
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267539"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte, jak napsat kód, který prochází proměnné a mění cestu provádění na základě těchto proměnných. V prohlížeči interaktivně napíšete kód v C# a zobrazíte výsledky kompilace a spuštění kódu. Tento kurz obsahuje řadu lekcí, které se seznámí s konstrukcemi větvení a smyček v jazyce C#. V těchto kurzech se seznámíte se základy jazyka C#.
- title: Rozhodování pomocí příkazu if
  durationInMinutes: 4
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Pokud ve svém prostředí používáte, měli byste místo toho postupovat podle pokynů pro [místní verzi](branches-and-loops-local.md) .


    Upravte deklaraci `b`, aby součet byl menší než 10:


    ```csharp

    int b = 3;

    ```


    Znovu vyberte tlačítko **Spustit** . Protože odpověď je menší než 10, nic se nevytiskne. Testovaná **podmínka** není splněná. Nemáte žádný kód, který by bylo možné provést, protože jste zatím napsali jenom jednu z možných větví příkazu `if`: větev pro splnění podmínky.


    > [!TIP]

    > Když se budete učit pracovat s C# (nebo každým jiným programovacím jazykem), budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby odhalí a upozorní vás na ně. Pokud výstup obsahuje chybové zprávy, pečlivě si prohlédněte příklad kódu a kód v interaktivním okně, abyste zjistili, co je potřeba opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu v C#.


    Tento první příklad ukazuje sílu příkazu `if` a logických typů. *Logická proměnná* může mít jednu z dvou hodnot: `true` nebo `false`. C# definuje pro logické proměnné speciální typ `bool`. Příkaz `if` kontroluje hodnotu typu `bool`. Pokud je tato hodnota `true`, provede se příkaz následující za `if`. V opačném případě se přeskočí.


    Tento proces kontroly podmínek a provádění příkazů založených na těchto podmínkách je účinný. Pojďme se na to podívat blíž.
- title: Spolupráce if a else
  durationInMinutes: 10
  content: "\nChcete-li ve větvích True a False provést různý kód, vytvoříte větev `else`, která se provede, když podmínka není splněná. Vyzkoušejte následující:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nPříkaz následující za klíčovým slovem `else` se provede jen tehdy, když má testovaná podmínka hodnotu `false`. Kombinace `if` a `else` s logickými podmínkami poskytuje veškerou sílu, kterou potřebujete.\n\n> [!IMPORTANT]\n> Důvodem odsazení pod příkazy `if` a `else` je snadnější čtení pro uživatele.\n> Jazyk C# nezpracovává odsazení ani prázdné znaky jako významné.\n> Příkaz následující za klíčovým slovem `if` nebo `else` se provede na základě podmínky. Všechny ukázky v tomto kurzu se řídí běžným postupem odsazení řádků na základě toku řízení příkazů.\n\nVzhledem k tomu, že odsazení není důležité, je nutné použít `{` a `}` k označení, zda chcete, aby bylo více než jeden příkaz součástí bloku, který je spuštěn podmíněně. Programátoři v C# obvykle používají tyto složené závorky pro všechny klauzule `if` a `else`. Následující příklad je stejný jako to, co jste vytvořili. Zkuste to.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Ve zbývající části tohoto kurzu obsahuje ukázka kódu všechny složené závorky, a to po přijatých postupech.\n\nMůžete testovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n`==`Testy symbolů pro *rovnost*. Použití `==` rozlišuje test pro rovnost z přiřazení, které jste viděli v `a = 5` .\n\nZápis `&&` představuje „a zároveň“. To znamená, že když se má provést větev True, musí být splněny obě podmínky.  Tyto příklady také ukazují, že můžete mít v každé podmíněné větvi víc příkazů, pokud je uzavřete mezi `{` a `}`.\n\nTaké můžete použít zápis `||`, který představuje „nebo“:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nUmožňuje upravit hodnoty `a` , `b` a a `c` přepínat mezi `&&` a a `||` prozkoumat. Získáte lepší znalosti o tom, jak `&&` operátory a `||` fungují.\n"
- title: Použití smyček k opakování operací
  durationInMinutes: 6
  content: >
    Dalším důležitým konceptem pro vytváření větších programů jsou **smyčky**. Smyčky použijete k opakování příkazů, které chcete provést víckrát než jednou. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Příkaz `while` zkontroluje podmínku a provede příkaz následující za `while`. Bude opakovaně kontrolovat podmínku a provádět příkaz, dokud bude podmínka splněna.


    V tomto příkladu je ještě jeden nový operátor. Zápis `++` za proměnnou `counter` je operátor **inkrementace**. Přičte 1 k hodnotě čítače a uloží hodnotu do proměnné counter.


    > [!IMPORTANT]

    > Ověřte, že podmínky smyčky `while` se při spuštění kódu přepne na false. Jinak vytvoříte **nekonečnou smyčku**, ve které program nikdy neskončí. To si nebudeme ukazovat, protože by vypršel časový limit modulu, který spouští váš kód, a neviděli byste žádný výstup.


    Smyčka `while` otestuje podmínku před spuštěním kódu, který následuje za `while`. Smyčka `do` ... `while` nejdřív spustí kód a potom zkontrolujte tuto podmínku. Vypadá takto:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Tato smyčka `do` a dřívější smyčka `while` fungují stejně.


    Teď přejdeme k poslednímu příkazu smyčky.
- title: Práce se smyčkou for
  durationInMinutes: 5
  content: >
    Dalím běžným příkazem smyčky, se kterým se setkáte v kódu C#, je smyčka `for`. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Dělá to samé jako smyčky `while` a `do`, které jste už použili. Příkaz `for` má tři části, které řídí jeho fungování.


    První část je **pro inicializátor inicializátoru**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky, a nastaví její počáteční hodnotu na `0` .


    Střední část je **pro podmínku**: `counter < 10` deklaruje, že se tato `for` smyčka pokračuje, dokud hodnota čítače není menší než 10.


    Poslední část je **for iterátor**: Určuje, `counter++` jak se má změnit proměnná smyčky po provedení bloku po `for` příkazu. V tomto případě určuje, že `counter` se má po každém provedení bloku zvýšit o 1.


    Zkuste si s touto ukázkou zaexperimentovat. Vyzkoušejte všechny následující možnosti:


    - Změňte inicializační výraz, aby začínal jinou hodnotou.

    - Změňte podmínku tak, aby se zastavila při jiné hodnotě.


    Až skončíte, přejdeme k tomu, abyste si vyzkoušeli, co jste se naučili, a napsali kus kódu sami.


    Existuje jeden další příkaz smyčky, který není popsaný v tomto kurzu: `foreach` příkaz. `foreach`Příkaz opakuje svůj příkaz pro každou položku v sekvenci položek. Nejčastěji se používá s *kolekcemi*, takže se zabývá v dalším kurzu.
- title: Vytvořené vnořené smyčky
  durationInMinutes: 10
  content: "`while` `do` Smyčka, nebo `for` může být vnořena do jiné smyčky, aby vytvořila matici pomocí kombinace každé položky ve vnější smyčce s každou položkou uvnitř vnitřní smyčky. Pojďme to udělat pro sestavení sady alfanumerických párů reprezentujících řádky a sloupce.\n\nJedna `for` smyčka může vygenerovat řádky:\n\n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  Console.WriteLine($\"The row is {row}\");\n}\n```\n\nDalší smyčka může vygenerovat sloupce:\n\n```csharp\nfor (char column = 'a'; column < 'k'; column++)\n{\n  Console.WriteLine($\"The column is {column}\");\n}\n```\n\nMůžete vnořit jednu smyčku dovnitř do dvojice formulářů:\n  \n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  for (char column = 'a'; column < 'k'; column++)\n  {\n    Console.WriteLine($\"The cell is ({row}, {column})\");\n  }\n}\n```\n\nMůžete vidět, že vnější smyčka se jednou zvýší pro každé úplné spuštění vnitřní smyčky. Zaměnit vnořování řádků a sloupců a Prohlédněte si změny sami.\n"
- title: Kombinace větví a smyček
  durationInMinutes: 12
  content: >
    Teď když jste viděli příkaz `if` a konstruktory cyklů v jazyce C#, zkuste, jestli dokážete v jazyce C# napsat kód, který zjistí součet všech celých čísel od 1 do 20, která jsou dělitelná 3.  Tady je několik tipů:


    - Operátor `%` vrací zbytek po operaci dělení.

    - Příkaz `if` poskytuje podmínku pro zjištění, jestli konkrétní číslo má být součástí tohoto součtu.

    - Smyčka `for` pomůže zopakovat sérii kroků pro všechna čísla od 1 do 20.


    Vyzkoušejte si to sami. A potom se podívejte, jak jste si vedli. Jako výsledek by vám mělo vyjít 63.
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```
- title: Gratulujeme!
  content: >-
    Dokončili jste Interaktivní kurz větve a smyček. Kliknutím na odkaz **kolekce** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o těchto konceptech najdete v těchto článcích:


    - [Příkaz If a else](../../language-reference/keywords/if-else.md)

    - [While – příkaz](../../language-reference/keywords/while.md)

    - [Příkaz Do](../../language-reference/keywords/do.md)

    - [Příkaz for](../../language-reference/keywords/for.md)
