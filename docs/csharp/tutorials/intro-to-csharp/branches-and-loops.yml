### YamlMime:Tutorial
title: Další informace o podmíněné logice s příkazy větví a smyček
metadata:
  title: Větve a smyčky – Úvod k C# interaktivnímu kurzu
  description: V tomto kurzu o větvích a smyčkách použijete prohlížeč k interaktivnímu Projděte C# . Napíšete C# kód a uvidíte výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekce seznamů
  ms.openlocfilehash: ab709b6b30b5a173e2faf08b577e4d7a3d9a9034
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969430"
items:
- durationInMinutes: 1
  content: >
    V tomto kurzu se naučíte, jak napsat kód, který prochází proměnné a mění cestu provádění na základě těchto proměnných. Použijete prohlížeč k interaktivnímu psaní C# a uvidíte výsledky kompilace a spuštění kódu. Tento kurz obsahuje řadu lekcí, které se seznámí s konstrukcemi větvení a smyček C#v. V těchto lekcích se naučíte základy C# jazyka.
- title: Rozhodování pomocí příkazu if
  durationInMinutes: 4
  content: >
    Spusťte následující kód v interaktivním okně. Vyberte tlačítko pro **zadání detailního režimu** . Potom do interaktivního okna zadejte následující blok kódu a vyberte **Spustit**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Pokud ve svém prostředí používáte, měli byste místo toho postupovat podle pokynů pro [místní verzi](branches-and-loops-local.md) .


    Upravte deklaraci `b` tak, aby součet byla menší než 10:


    ```csharp

    int b = 3;

    ```


    Znovu vyberte tlačítko **Spustit** . Vzhledem k tomu, že odpověď je menší než 10, nic se nevytiskne. **Podmínka** , kterou testujete, je nepravdivá. Nemáte žádný kód, který by bylo možné spustit, protože jste zapsali pouze jednu z možných větví pro příkaz `if`: skutečná větev.


    > [!TIP]

    > Při prozkoumávání C# (nebo jakémkoli programovacím jazyce) budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby vyhledá a nahlásí je. V případě, že výstup obsahuje chybové zprávy, pečlivě si prohlédněte vzorový kód a kód v interaktivním okně, kde zjistíte, co je třeba opravit.

    > Toto cvičení vám pomůže zjistit strukturu C# kódu.


    Tento první příklad ukazuje sílu `if` a logických typů. *Logická hodnota* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`. C#definuje speciální typ, `bool` pro logické proměnné. Příkaz `if` kontroluje hodnotu `bool`. Když je hodnota `true`, příkaz následující za `if` se spustí. V opačném případě se přeskočí.


    Tento proces kontroly podmínek a provádění příkazů založených na těchto podmínkách je velmi výkonný. Pojďme prozkoumat víc.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Nastavit, zda a jinak spolupracovat
  durationInMinutes: 10
  content: "\nChcete-li spustit jiný kód v větvích true i false, vytvořte větev `else`, která se spustí, když je podmínka nepravdivá. Vyzkoušejte tuto akci:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nPříkaz následující za klíčovým slovem `else` se spustí pouze v případě, že je testovaná podmínka `false`. Kombinování `if` a `else` s logickými podmínkami poskytuje veškerou sílu, kterou potřebujete.\n\n> [!IMPORTANT]\n> Odsazení pod příkazy `if` a `else` je pro lidské čtenáře.\n> C# Jazyk nezpracovává odsazení ani prázdné znaky jako významné.\n> Příkaz následující po `if` nebo `else` klíčového slova se spustí na základě podmínky. Všechny ukázky v tomto kurzu se řídí běžným postupem odsazení řádků na základě toku řízení příkazů.\n\nVzhledem k tomu, že odsazení není důležité, je nutné použít `{` a `}` k označení, zda chcete, aby byl více než jeden příkaz součástí bloku, který je spuštěn podmíněně. C#programátoři obvykle používají tyto složené závorky u všech klauzulí `if` a `else`. Následující příklad je stejný jako ten, který jste právě vytvořili. Zkuste to.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Ve zbývající části tohoto kurzu obsahuje ukázka kódu všechny složené závorky, a to po přijatých postupech.\n\nMůžete testovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n`==` testy symbolů pro *rovnost*. Použití `==` rozlišuje test pro rovnost z přiřazení, které jste viděli v `a = 5`.\n\n`&&` představuje \"a\". To znamená, že obě podmínky musí mít hodnotu true, aby se příkaz spustil ve větvi true.  Tyto příklady také ukazují, že můžete mít v každé podmíněnou větev více příkazů, za předpokladu, že je uzavíráte do `{` a `}`.\n\nMůžete také použít `||` k reprezentaci \"nebo\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nUpravte hodnoty `a`, `b`a `c` a přepínejte mezi `&&` a `||`, abyste prozkoumali. Získáte lepší informace o tom, jak operátory `&&` a `||` fungují.\n\n> [!NOTE]\n> Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Opakování operací pomocí smyček
  durationInMinutes: 6
  content: >
    Dalším důležitým konceptem vytvoření většího programu jsou **smyčky**. Pomocí smyček zopakujete příkazy, které chcete spustit více než jednou. Vyzkoušení tohoto kódu v interaktivním okně:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Příkaz `while` zkontroluje podmínku a provede příkaz za `while`. Zopakuje kontrolu podmínky a spustí tyto příkazy, dokud není podmínka pravdivá.


    V tomto příkladu je druhý operátor New. `++` za proměnnou `counter` je operátor **přírůstku** . Přičte 1 k hodnotě čítače a uloží tuto hodnotu do proměnné čítače.


    > [!IMPORTANT]

    > Ujistěte se, že stav smyčky `while` při spuštění kódu přepne na false. V opačném případě vytvoříte **nekonečnou smyčku** , ve které program nikdy nekončí. Nepovedlo se to ukázat, protože modul, který spouští váš kód, vyprší časový limit a nebudete mít k dispozici žádný výstup z programu.


    Smyčka `while` testuje podmínku před spuštěním kódu po `while`. Cyklus `do`... `while` nejprve spustí kód a poté zkontroluje podmínku. Vypadá to takto:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Tato smyčka `do` a dřívější `while` cyklicky fungují.


    Pojďme přejít k jednomu poslednímu příkazu Loop.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce s cyklem for
  durationInMinutes: 5
  content: >
    Dalším příkazem běžné smyčky, který se zobrazí v C# kódu, je `for` smyčka. Vyzkoušení tohoto kódu v interaktivním okně:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Tato činnost funguje stejně jako smyčka `while` a smyčka `do`, kterou jste už použili. Příkaz `for` má tři části, které řídí, jak funguje.


    První část je **pro inicializátor inicializátoru**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky, a nastaví její počáteční hodnotu na `0`.


    Střední část je **pro podmínku**: `counter < 10` deklaruje, že se tato `for`á smyčka bude nadále spouštět, dokud hodnota čítače není menší než 10.


    Poslední část je **for iterátor**: `counter++` určuje, jak se má změnit proměnná smyčky po provedení bloku po příkazu `for`. Zde je uvedeno, že `counter` by měly být při každém spuštění bloku zvětšeny o 1.


    Vyzkoušejte si je sami. Vyzkoušejte následující:


    - Změňte inicializátor tak, aby začínal na jiné hodnotě.

    - Změňte podmínku tak, aby se zastavila s jinou hodnotou.


    Až to budete mít, pojďme přejít k tomu, abyste si sami napsali kód, abyste mohli používat, co jste se naučili.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Kombinování větví a smyček
  durationInMinutes: 12
  content: >
    Teď, když jste viděli příkaz `if` a konstrukce smyček v C# jazyce, se podívejte, jestli můžete napsat C# kód, abyste našli součet všech celých čísel od 1 do 20, která jsou dělitelná 3.  Tady je několik tipů:


    - Operátor `%` poskytuje zbytek operace dělení.

    - Příkaz `if` poskytuje podmínku pro zjištění, zda číslo by mělo být součástí součtu.

    - Smyčka `for` vám může pomáhat opakovat řadu kroků pro všechna čísla 1 až 20.


    Vyzkoušejte si to sami. Potom zkontrolujte, jak jste to provedli. Jako pomocný parametr byste měli pro odpověď získat 63.


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Pracovali jste s podobným způsobem?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Toto online prostředí kódování je v režimu náhledu. Pokud narazíte na problémy, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Blahopřejeme!
  content: >-
    Dokončili jste Interaktivní kurz větve a smyček. Kliknutím na odkaz **kolekce** níže můžete spustit další interaktivní kurz, nebo můžete navštívit [Web .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout .NET Core SDK, vytvořit projekt na počítači a zachovat kódování. Oddíl "další kroky" vás převede zpět na tyto kurzy.


    Další informace o těchto konceptech najdete v těchto tématech:


    - [IF a else – příkaz](../../language-reference/keywords/if-else.md)

    - [While – příkaz](../../language-reference/keywords/while.md)

    - [Do – příkaz](../../language-reference/keywords/do.md)

    - [Příkaz for](../../language-reference/keywords/for.md)
