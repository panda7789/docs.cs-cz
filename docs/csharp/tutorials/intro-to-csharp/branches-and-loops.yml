### YamlMime:Tutorial
title: Naučte se podmíněnou logiku pomocí příkazů větvea smyčka
metadata:
  title: Větve a smyčky – interaktivní výuka úvodu do jazyka C#
  description: V tomto kurzu o větvích a smyčkách se pomocí prohlížeče interaktivně naučíte C#. Napíšete kód v C# a potom si výsledky jeho kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekce seznamu
  ms.openlocfilehash: ab709b6b30b5a173e2faf08b577e4d7a3d9a9034
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969430"
items:
- durationInMinutes: 1
  content: >
    Tento kurz vás naučí, jak psát kód, který zkoumá proměnné a změní cestu spuštění na základě těchto proměnných. V prohlížeči interaktivně napíšete kód v C# a zobrazíte výsledky kompilace a spuštění kódu. Tento kurz obsahuje řadu lekcí, které zkoumají větvení a opakování konstrukce v C#. V těchto kurzech se seznámíte se základy jazyka C#.
- title: Rozhodování pomocí příkazu if
  durationInMinutes: 4
  content: >
    Spusťte v interaktivním okně následující kód. Vyberte tlačítko **Enter focus mode** . Potom zadejte do interaktivního okna následující blok kódu a vyberte **Spustit**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Pokud používáte toto v prostředí, měli byste postupovat podle pokynů pro [místní verzi](branches-and-loops-local.md) místo.


    Upravte deklaraci `b`, aby součet byl menší než 10:


    ```csharp

    int b = 3;

    ```


    Znovu vyberte tlačítko **Spustit.** Protože odpověď je menší než 10, nic se nevytiskne. Testovaná **podmínka** není splněná. Nemáte žádný kód, který by bylo možné provést, protože jste zatím napsali jenom jednu z možných větví příkazu `if`: větev pro splnění podmínky.


    > [!TIP]

    > Když se budete učit pracovat s C# (nebo každým jiným programovacím jazykem), budete při psaní kódu dělat chyby. **Kompilátor** tyto chyby odhalí a upozorní vás na ně. Pokud výstup obsahuje chybové zprávy, pečlivě si prohlédněte příklad kódu a kód v interaktivním okně, abyste zjistili, co je potřeba opravit.

    > Toto cvičení vám pomůže seznámit se se strukturou kódu v C#.


    Tento první příklad ukazuje sílu příkazu `if` a logických typů. *Logická proměnná* může mít jednu z dvou hodnot: `true` nebo `false`. C# definuje pro logické proměnné speciální typ `bool`. Příkaz `if` kontroluje hodnotu typu `bool`. Pokud je tato hodnota `true`, provede se příkaz následující za `if`. V opačném případě se přeskočí.


    Tento proces kontroly podmínek a provádění příkazů na základě těchto podmínek je velmi účinný. Pojďme se na to podívat blíž.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Spolupráce if a else
  durationInMinutes: 10
  content: "\nChcete-li ve větvích True a False provést různý kód, vytvoříte větev `else`, která se provede, když podmínka není splněná. Vyzkoušejte tohle:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nPříkaz následující za klíčovým slovem `else` se provede jen tehdy, když má testovaná podmínka hodnotu `false`. Kombinace `if` a `else` s logickými podmínkami poskytuje veškerou sílu, kterou potřebujete.\n\n> [!IMPORTANT]\n> Důvodem odsazení pod příkazy `if` a `else` je snadnější čtení pro uživatele.\n> Jazyk C# nepovažuje odsazení nebo prázdné místo za významné.\n> Příkaz následující za klíčovým slovem `if` nebo `else` se provede na základě podmínky. Všechny ukázky v tomto kurzu postupujte podle běžné praxe odsadit řádky založené na toku řízení příkazů.\n\nProtože odsazení není významné, je potřeba pomocí `{` a `}` vyznačit, když chcete, aby jako součást podmíněně prováděného bloku bylo víc příkazů. Programátoři v C# obvykle používají tyto složené závorky pro všechny klauzule `if` a `else`. Následující příklad je stejný jako ten, co jste zrovna vytvořili. Zkuste to.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Prostřednictvím zbytku tohoto kurzu ukázky kódu všechny obsahují závorky, následující přijaté postupy.\n\nMůžete testovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nSymbol `==` testuje *rovnost*. Použití `==` odlišuje test rovnosti od `a = 5`přiřazení, které jste viděli v .\n\nZápis `&&` představuje „a zároveň“. To znamená, že když se má provést větev True, musí být splněny obě podmínky.  Tyto příklady také ukazují, že můžete mít v každé podmíněné větvi víc příkazů, pokud je uzavřete mezi `{` a `}`.\n\nTaké můžete použít zápis `||`, který představuje „nebo“:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nUpravte hodnoty `a` `b`, `c` a a `&&` `||` přepněte mezi a prozkoumat. Získáte větší pochopení toho, `&&` jak `||` a operátoři pracují.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Použití smyček k opakování operací
  durationInMinutes: 6
  content: >
    Dalším důležitým konceptem pro vytváření větších programů jsou **smyčky**. Smyčky použijete k opakování příkazů, které chcete provést víckrát než jednou. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Příkaz `while` zkontroluje podmínku a provede příkaz následující za `while`. Bude opakovaně kontrolovat podmínku a provádět příkaz, dokud bude podmínka splněna.


    V tomto příkladu je ještě jeden nový operátor. Zápis `++` za proměnnou `counter` je operátor **inkrementace**. Přičte 1 k hodnotě čítače a uloží hodnotu do proměnné counter.


    > [!IMPORTANT]

    > Ověřte, že podmínky smyčky `while` se při spuštění kódu přepne na false. Jinak vytvoříte **nekonečnou smyčku**, ve které program nikdy neskončí. To si nebudeme ukazovat, protože by vypršel časový limit modulu, který spouští váš kód, a neviděli byste žádný výstup.


    Smyčka `while` otestuje podmínku před spuštěním kódu, který následuje za `while`. Smyčka `do` ... `while` nejdřív spustí kód a potom zkontrolujte tuto podmínku. Vypadá to takhle:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Tato smyčka `do` a dřívější smyčka `while` fungují stejně.


    Teď přejdeme k poslednímu příkazu smyčky.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Práce se smyčkou for
  durationInMinutes: 5
  content: >
    Dalím běžným příkazem smyčky, se kterým se setkáte v kódu C#, je smyčka `for`. Vyzkoušejte tento kód v interaktivním okně:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Dělá to samé jako smyčky `while` a `do`, které jste už použili. Příkaz `for` má tři části, které řídí jeho fungování.


    První část je **pro inicializátor**: `int counter = 0;` deklaruje, že `counter` je proměnná smyčky a nastaví jeho počáteční hodnotu . `0`


    Střední část je **for** `counter < 10` condition : `for` deklaruje, že tato smyčka pokračuje v provádění, dokud je hodnota čítače menší než 10.


    Poslední část je **for iterator**: `counter++` určuje, jak upravit proměnnou smyčky `for` po provedení bloku po příkazu. V tomto případě určuje, že `counter` se má po každém provedení bloku zvýšit o 1.


    Zkuste si s touto ukázkou zaexperimentovat. Vyzkoušejte všechny následující možnosti:


    - Změňte inicializační výraz, aby začínal jinou hodnotou.

    - Změňte podmínku tak, aby se zastavila při jiné hodnotě.


    Až skončíte, přejdeme k tomu, abyste si vyzkoušeli, co jste se naučili, a napsali kus kódu sami.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Kombinace větví a smyček
  durationInMinutes: 12
  content: >
    Teď když jste viděli příkaz `if` a konstruktory cyklů v jazyce C#, zkuste, jestli dokážete v jazyce C# napsat kód, který zjistí součet všech celých čísel od 1 do 20, která jsou dělitelná 3.  Tady je několik tipů:


    - Operátor `%` vrací zbytek po operaci dělení.

    - Příkaz `if` poskytuje podmínku pro zjištění, jestli konkrétní číslo má být součástí tohoto součtu.

    - Smyčka `for` pomůže zopakovat sérii kroků pro všechna čísla od 1 do 20.


    Vyzkoušejte si to sami. A potom se podívejte, jak jste si vedli. Jako výsledek by vám mělo vyjít 63.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud se setkáte s potížemi, oznamte je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Blahopřejeme!
  content: >-
    Dokončili jste interaktivní kurz "větve a smyčky". Můžete vybrat odkaz **na kolekci seznamu** níže a spustit další interaktivní kurz, nebo můžete navštívit [web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) a stáhnout sadku .NET Core SDK, vytvořit projekt v počítači a zachovat kódování. Část "Další kroky" vás vrátí zpět do těchto kurzů.


    Více se o těchto konceptech dozvíte v těchto tématech:


    - [Příkaz If a else](../../language-reference/keywords/if-else.md)

    - [Zatímco prohlášení](../../language-reference/keywords/while.md)

    - [Příkaz Do](../../language-reference/keywords/do.md)

    - [Pro výpis](../../language-reference/keywords/for.md)
